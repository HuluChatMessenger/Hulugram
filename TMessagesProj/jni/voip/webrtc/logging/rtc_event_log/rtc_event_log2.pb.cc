// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtc_event_log2.proto

#include "rtc_event_log2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlrState_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioNetworkAdaptations_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioPlayoutEvents_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioRecvStreamConfig_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioSendStreamConfig_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BeginLogEvent_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BweProbeCluster_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BweProbeResultFailure_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BweProbeResultSuccess_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelayBasedBweUpdates_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DtlsTransportStateEvent_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DtlsWritableState_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndLogEvent_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameDecodedEvents_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericAckReceived_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericPacketReceived_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericPacketSent_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IceCandidatePairConfig_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IceCandidatePairEvent_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncomingRtcpPackets_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncomingRtpPackets_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LossBasedBweUpdates_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutgoingRtcpPackets_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutgoingRtpPackets_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteEstimates_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteChange_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RtpHeaderExtensionConfig_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoRecvStreamConfig_rtc_5fevent_5flog2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoSendStreamConfig_rtc_5fevent_5flog2_2eproto;
namespace webrtc {
namespace rtclog2 {
class EventStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventStream> _instance;
} _EventStream_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
} _Event_default_instance_;
class GenericPacketReceivedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericPacketReceived> _instance;
} _GenericPacketReceived_default_instance_;
class GenericPacketSentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericPacketSent> _instance;
} _GenericPacketSent_default_instance_;
class GenericAckReceivedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericAckReceived> _instance;
} _GenericAckReceived_default_instance_;
class IncomingRtpPacketsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncomingRtpPackets> _instance;
} _IncomingRtpPackets_default_instance_;
class OutgoingRtpPacketsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutgoingRtpPackets> _instance;
} _OutgoingRtpPackets_default_instance_;
class IncomingRtcpPacketsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncomingRtcpPackets> _instance;
} _IncomingRtcpPackets_default_instance_;
class OutgoingRtcpPacketsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutgoingRtcpPackets> _instance;
} _OutgoingRtcpPackets_default_instance_;
class AudioPlayoutEventsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioPlayoutEvents> _instance;
} _AudioPlayoutEvents_default_instance_;
class FrameDecodedEventsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameDecodedEvents> _instance;
} _FrameDecodedEvents_default_instance_;
class BeginLogEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BeginLogEvent> _instance;
} _BeginLogEvent_default_instance_;
class EndLogEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndLogEvent> _instance;
} _EndLogEvent_default_instance_;
class LossBasedBweUpdatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LossBasedBweUpdates> _instance;
} _LossBasedBweUpdates_default_instance_;
class DelayBasedBweUpdatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelayBasedBweUpdates> _instance;
} _DelayBasedBweUpdates_default_instance_;
class RtpHeaderExtensionConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RtpHeaderExtensionConfig> _instance;
} _RtpHeaderExtensionConfig_default_instance_;
class VideoRecvStreamConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoRecvStreamConfig> _instance;
} _VideoRecvStreamConfig_default_instance_;
class VideoSendStreamConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoSendStreamConfig> _instance;
} _VideoSendStreamConfig_default_instance_;
class AudioRecvStreamConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioRecvStreamConfig> _instance;
} _AudioRecvStreamConfig_default_instance_;
class AudioSendStreamConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioSendStreamConfig> _instance;
} _AudioSendStreamConfig_default_instance_;
class AudioNetworkAdaptationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioNetworkAdaptations> _instance;
} _AudioNetworkAdaptations_default_instance_;
class BweProbeClusterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BweProbeCluster> _instance;
} _BweProbeCluster_default_instance_;
class BweProbeResultSuccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BweProbeResultSuccess> _instance;
} _BweProbeResultSuccess_default_instance_;
class BweProbeResultFailureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BweProbeResultFailure> _instance;
} _BweProbeResultFailure_default_instance_;
class AlrStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlrState> _instance;
} _AlrState_default_instance_;
class IceCandidatePairConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IceCandidatePairConfig> _instance;
} _IceCandidatePairConfig_default_instance_;
class IceCandidatePairEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IceCandidatePairEvent> _instance;
} _IceCandidatePairEvent_default_instance_;
class DtlsTransportStateEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DtlsTransportStateEvent> _instance;
} _DtlsTransportStateEvent_default_instance_;
class DtlsWritableStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DtlsWritableState> _instance;
} _DtlsWritableState_default_instance_;
class RouteChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteChange> _instance;
} _RouteChange_default_instance_;
class RemoteEstimatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteEstimates> _instance;
} _RemoteEstimates_default_instance_;
}  // namespace rtclog2
}  // namespace webrtc
static void InitDefaultsscc_info_AlrState_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_AlrState_default_instance_;
    new (ptr) ::webrtc::rtclog2::AlrState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::AlrState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlrState_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AlrState_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_AudioNetworkAdaptations_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_AudioNetworkAdaptations_default_instance_;
    new (ptr) ::webrtc::rtclog2::AudioNetworkAdaptations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::AudioNetworkAdaptations::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioNetworkAdaptations_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AudioNetworkAdaptations_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_AudioPlayoutEvents_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_AudioPlayoutEvents_default_instance_;
    new (ptr) ::webrtc::rtclog2::AudioPlayoutEvents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::AudioPlayoutEvents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioPlayoutEvents_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AudioPlayoutEvents_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_AudioRecvStreamConfig_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_AudioRecvStreamConfig_default_instance_;
    new (ptr) ::webrtc::rtclog2::AudioRecvStreamConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::AudioRecvStreamConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioRecvStreamConfig_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AudioRecvStreamConfig_rtc_5fevent_5flog2_2eproto}, {
      &scc_info_RtpHeaderExtensionConfig_rtc_5fevent_5flog2_2eproto.base,}};

static void InitDefaultsscc_info_AudioSendStreamConfig_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_AudioSendStreamConfig_default_instance_;
    new (ptr) ::webrtc::rtclog2::AudioSendStreamConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::AudioSendStreamConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioSendStreamConfig_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AudioSendStreamConfig_rtc_5fevent_5flog2_2eproto}, {
      &scc_info_RtpHeaderExtensionConfig_rtc_5fevent_5flog2_2eproto.base,}};

static void InitDefaultsscc_info_BeginLogEvent_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_BeginLogEvent_default_instance_;
    new (ptr) ::webrtc::rtclog2::BeginLogEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::BeginLogEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BeginLogEvent_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BeginLogEvent_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_BweProbeCluster_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_BweProbeCluster_default_instance_;
    new (ptr) ::webrtc::rtclog2::BweProbeCluster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::BweProbeCluster::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BweProbeCluster_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BweProbeCluster_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_BweProbeResultFailure_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_BweProbeResultFailure_default_instance_;
    new (ptr) ::webrtc::rtclog2::BweProbeResultFailure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::BweProbeResultFailure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BweProbeResultFailure_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BweProbeResultFailure_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_BweProbeResultSuccess_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_BweProbeResultSuccess_default_instance_;
    new (ptr) ::webrtc::rtclog2::BweProbeResultSuccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::BweProbeResultSuccess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BweProbeResultSuccess_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BweProbeResultSuccess_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_DelayBasedBweUpdates_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_DelayBasedBweUpdates_default_instance_;
    new (ptr) ::webrtc::rtclog2::DelayBasedBweUpdates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::DelayBasedBweUpdates::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelayBasedBweUpdates_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DelayBasedBweUpdates_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_DtlsTransportStateEvent_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_DtlsTransportStateEvent_default_instance_;
    new (ptr) ::webrtc::rtclog2::DtlsTransportStateEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::DtlsTransportStateEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DtlsTransportStateEvent_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DtlsTransportStateEvent_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_DtlsWritableState_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_DtlsWritableState_default_instance_;
    new (ptr) ::webrtc::rtclog2::DtlsWritableState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::DtlsWritableState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DtlsWritableState_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DtlsWritableState_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_EndLogEvent_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_EndLogEvent_default_instance_;
    new (ptr) ::webrtc::rtclog2::EndLogEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::EndLogEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndLogEvent_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EndLogEvent_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_Event_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_Event_default_instance_;
    new (ptr) ::webrtc::rtclog2::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Event_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_EventStream_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_EventStream_default_instance_;
    new (ptr) ::webrtc::rtclog2::EventStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::EventStream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<29> scc_info_EventStream_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 29, InitDefaultsscc_info_EventStream_rtc_5fevent_5flog2_2eproto}, {
      &scc_info_Event_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_IncomingRtpPackets_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_OutgoingRtpPackets_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_IncomingRtcpPackets_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_OutgoingRtcpPackets_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_AudioPlayoutEvents_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_FrameDecodedEvents_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_BeginLogEvent_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_EndLogEvent_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_LossBasedBweUpdates_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_DelayBasedBweUpdates_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_AudioNetworkAdaptations_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_BweProbeCluster_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_BweProbeResultSuccess_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_BweProbeResultFailure_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_AlrState_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_IceCandidatePairConfig_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_IceCandidatePairEvent_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_DtlsTransportStateEvent_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_DtlsWritableState_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_GenericPacketSent_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_GenericPacketReceived_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_GenericAckReceived_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_RouteChange_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_RemoteEstimates_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_AudioRecvStreamConfig_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_AudioSendStreamConfig_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_VideoRecvStreamConfig_rtc_5fevent_5flog2_2eproto.base,
      &scc_info_VideoSendStreamConfig_rtc_5fevent_5flog2_2eproto.base,}};

static void InitDefaultsscc_info_FrameDecodedEvents_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_FrameDecodedEvents_default_instance_;
    new (ptr) ::webrtc::rtclog2::FrameDecodedEvents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::FrameDecodedEvents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameDecodedEvents_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FrameDecodedEvents_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_GenericAckReceived_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_GenericAckReceived_default_instance_;
    new (ptr) ::webrtc::rtclog2::GenericAckReceived();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::GenericAckReceived::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericAckReceived_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GenericAckReceived_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_GenericPacketReceived_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_GenericPacketReceived_default_instance_;
    new (ptr) ::webrtc::rtclog2::GenericPacketReceived();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::GenericPacketReceived::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericPacketReceived_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GenericPacketReceived_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_GenericPacketSent_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_GenericPacketSent_default_instance_;
    new (ptr) ::webrtc::rtclog2::GenericPacketSent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::GenericPacketSent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericPacketSent_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GenericPacketSent_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_IceCandidatePairConfig_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_IceCandidatePairConfig_default_instance_;
    new (ptr) ::webrtc::rtclog2::IceCandidatePairConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::IceCandidatePairConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IceCandidatePairConfig_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IceCandidatePairConfig_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_IceCandidatePairEvent_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_IceCandidatePairEvent_default_instance_;
    new (ptr) ::webrtc::rtclog2::IceCandidatePairEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::IceCandidatePairEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IceCandidatePairEvent_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IceCandidatePairEvent_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_IncomingRtcpPackets_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_IncomingRtcpPackets_default_instance_;
    new (ptr) ::webrtc::rtclog2::IncomingRtcpPackets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::IncomingRtcpPackets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncomingRtcpPackets_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IncomingRtcpPackets_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_IncomingRtpPackets_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_IncomingRtpPackets_default_instance_;
    new (ptr) ::webrtc::rtclog2::IncomingRtpPackets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::IncomingRtpPackets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncomingRtpPackets_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IncomingRtpPackets_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_LossBasedBweUpdates_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_LossBasedBweUpdates_default_instance_;
    new (ptr) ::webrtc::rtclog2::LossBasedBweUpdates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::LossBasedBweUpdates::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LossBasedBweUpdates_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LossBasedBweUpdates_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_OutgoingRtcpPackets_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_OutgoingRtcpPackets_default_instance_;
    new (ptr) ::webrtc::rtclog2::OutgoingRtcpPackets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::OutgoingRtcpPackets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutgoingRtcpPackets_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OutgoingRtcpPackets_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_OutgoingRtpPackets_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_OutgoingRtpPackets_default_instance_;
    new (ptr) ::webrtc::rtclog2::OutgoingRtpPackets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::OutgoingRtpPackets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutgoingRtpPackets_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OutgoingRtpPackets_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_RemoteEstimates_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_RemoteEstimates_default_instance_;
    new (ptr) ::webrtc::rtclog2::RemoteEstimates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::RemoteEstimates::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteEstimates_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RemoteEstimates_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_RouteChange_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_RouteChange_default_instance_;
    new (ptr) ::webrtc::rtclog2::RouteChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::RouteChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteChange_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RouteChange_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_RtpHeaderExtensionConfig_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_RtpHeaderExtensionConfig_default_instance_;
    new (ptr) ::webrtc::rtclog2::RtpHeaderExtensionConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::RtpHeaderExtensionConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RtpHeaderExtensionConfig_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RtpHeaderExtensionConfig_rtc_5fevent_5flog2_2eproto}, {}};

static void InitDefaultsscc_info_VideoRecvStreamConfig_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_VideoRecvStreamConfig_default_instance_;
    new (ptr) ::webrtc::rtclog2::VideoRecvStreamConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::VideoRecvStreamConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoRecvStreamConfig_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VideoRecvStreamConfig_rtc_5fevent_5flog2_2eproto}, {
      &scc_info_RtpHeaderExtensionConfig_rtc_5fevent_5flog2_2eproto.base,}};

static void InitDefaultsscc_info_VideoSendStreamConfig_rtc_5fevent_5flog2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_VideoSendStreamConfig_default_instance_;
    new (ptr) ::webrtc::rtclog2::VideoSendStreamConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::VideoSendStreamConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoSendStreamConfig_rtc_5fevent_5flog2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VideoSendStreamConfig_rtc_5fevent_5flog2_2eproto}, {
      &scc_info_RtpHeaderExtensionConfig_rtc_5fevent_5flog2_2eproto.base,}};

namespace webrtc {
namespace rtclog2 {
bool FrameDecodedEvents_Codec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FrameDecodedEvents_Codec_strings[7] = {};

static const char FrameDecodedEvents_Codec_names[] =
  "CODEC_AV1"
  "CODEC_GENERIC"
  "CODEC_H264"
  "CODEC_H265"
  "CODEC_UNKNOWN"
  "CODEC_VP8"
  "CODEC_VP9";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FrameDecodedEvents_Codec_entries[] = {
  { {FrameDecodedEvents_Codec_names + 0, 9}, 4 },
  { {FrameDecodedEvents_Codec_names + 9, 13}, 1 },
  { {FrameDecodedEvents_Codec_names + 22, 10}, 5 },
  { {FrameDecodedEvents_Codec_names + 32, 10}, 6 },
  { {FrameDecodedEvents_Codec_names + 42, 13}, 0 },
  { {FrameDecodedEvents_Codec_names + 55, 9}, 2 },
  { {FrameDecodedEvents_Codec_names + 64, 9}, 3 },
};

static const int FrameDecodedEvents_Codec_entries_by_number[] = {
  4, // 0 -> CODEC_UNKNOWN
  1, // 1 -> CODEC_GENERIC
  5, // 2 -> CODEC_VP8
  6, // 3 -> CODEC_VP9
  0, // 4 -> CODEC_AV1
  2, // 5 -> CODEC_H264
  3, // 6 -> CODEC_H265
};

const std::string& FrameDecodedEvents_Codec_Name(
    FrameDecodedEvents_Codec value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FrameDecodedEvents_Codec_entries,
          FrameDecodedEvents_Codec_entries_by_number,
          7, FrameDecodedEvents_Codec_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FrameDecodedEvents_Codec_entries,
      FrameDecodedEvents_Codec_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FrameDecodedEvents_Codec_strings[idx].get();
}
bool FrameDecodedEvents_Codec_Parse(
    const std::string& name, FrameDecodedEvents_Codec* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FrameDecodedEvents_Codec_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<FrameDecodedEvents_Codec>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::CODEC_UNKNOWN;
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::CODEC_GENERIC;
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::CODEC_VP8;
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::CODEC_VP9;
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::CODEC_AV1;
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::CODEC_H264;
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::CODEC_H265;
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::Codec_MIN;
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::Codec_MAX;
constexpr int FrameDecodedEvents::Codec_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DelayBasedBweUpdates_DetectorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DelayBasedBweUpdates_DetectorState_strings[4] = {};

static const char DelayBasedBweUpdates_DetectorState_names[] =
  "BWE_NORMAL"
  "BWE_OVERUSING"
  "BWE_UNDERUSING"
  "BWE_UNKNOWN_STATE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DelayBasedBweUpdates_DetectorState_entries[] = {
  { {DelayBasedBweUpdates_DetectorState_names + 0, 10}, 1 },
  { {DelayBasedBweUpdates_DetectorState_names + 10, 13}, 3 },
  { {DelayBasedBweUpdates_DetectorState_names + 23, 14}, 2 },
  { {DelayBasedBweUpdates_DetectorState_names + 37, 17}, 0 },
};

static const int DelayBasedBweUpdates_DetectorState_entries_by_number[] = {
  3, // 0 -> BWE_UNKNOWN_STATE
  0, // 1 -> BWE_NORMAL
  2, // 2 -> BWE_UNDERUSING
  1, // 3 -> BWE_OVERUSING
};

const std::string& DelayBasedBweUpdates_DetectorState_Name(
    DelayBasedBweUpdates_DetectorState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DelayBasedBweUpdates_DetectorState_entries,
          DelayBasedBweUpdates_DetectorState_entries_by_number,
          4, DelayBasedBweUpdates_DetectorState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DelayBasedBweUpdates_DetectorState_entries,
      DelayBasedBweUpdates_DetectorState_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DelayBasedBweUpdates_DetectorState_strings[idx].get();
}
bool DelayBasedBweUpdates_DetectorState_Parse(
    const std::string& name, DelayBasedBweUpdates_DetectorState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DelayBasedBweUpdates_DetectorState_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DelayBasedBweUpdates_DetectorState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::BWE_UNKNOWN_STATE;
constexpr DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::BWE_NORMAL;
constexpr DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::BWE_UNDERUSING;
constexpr DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::BWE_OVERUSING;
constexpr DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::DetectorState_MIN;
constexpr DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::DetectorState_MAX;
constexpr int DelayBasedBweUpdates::DetectorState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool BweProbeResultFailure_FailureReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BweProbeResultFailure_FailureReason_strings[4] = {};

static const char BweProbeResultFailure_FailureReason_names[] =
  "INVALID_SEND_RECEIVE_INTERVAL"
  "INVALID_SEND_RECEIVE_RATIO"
  "TIMEOUT"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BweProbeResultFailure_FailureReason_entries[] = {
  { {BweProbeResultFailure_FailureReason_names + 0, 29}, 1 },
  { {BweProbeResultFailure_FailureReason_names + 29, 26}, 2 },
  { {BweProbeResultFailure_FailureReason_names + 55, 7}, 3 },
  { {BweProbeResultFailure_FailureReason_names + 62, 7}, 0 },
};

static const int BweProbeResultFailure_FailureReason_entries_by_number[] = {
  3, // 0 -> UNKNOWN
  0, // 1 -> INVALID_SEND_RECEIVE_INTERVAL
  1, // 2 -> INVALID_SEND_RECEIVE_RATIO
  2, // 3 -> TIMEOUT
};

const std::string& BweProbeResultFailure_FailureReason_Name(
    BweProbeResultFailure_FailureReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BweProbeResultFailure_FailureReason_entries,
          BweProbeResultFailure_FailureReason_entries_by_number,
          4, BweProbeResultFailure_FailureReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BweProbeResultFailure_FailureReason_entries,
      BweProbeResultFailure_FailureReason_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BweProbeResultFailure_FailureReason_strings[idx].get();
}
bool BweProbeResultFailure_FailureReason_Parse(
    const std::string& name, BweProbeResultFailure_FailureReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BweProbeResultFailure_FailureReason_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<BweProbeResultFailure_FailureReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BweProbeResultFailure_FailureReason BweProbeResultFailure::UNKNOWN;
constexpr BweProbeResultFailure_FailureReason BweProbeResultFailure::INVALID_SEND_RECEIVE_INTERVAL;
constexpr BweProbeResultFailure_FailureReason BweProbeResultFailure::INVALID_SEND_RECEIVE_RATIO;
constexpr BweProbeResultFailure_FailureReason BweProbeResultFailure::TIMEOUT;
constexpr BweProbeResultFailure_FailureReason BweProbeResultFailure::FailureReason_MIN;
constexpr BweProbeResultFailure_FailureReason BweProbeResultFailure::FailureReason_MAX;
constexpr int BweProbeResultFailure::FailureReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IceCandidatePairConfig_IceCandidatePairConfigType_strings[5] = {};

static const char IceCandidatePairConfig_IceCandidatePairConfigType_names[] =
  "ADDED"
  "DESTROYED"
  "SELECTED"
  "UNKNOWN_CONFIG_TYPE"
  "UPDATED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IceCandidatePairConfig_IceCandidatePairConfigType_entries[] = {
  { {IceCandidatePairConfig_IceCandidatePairConfigType_names + 0, 5}, 1 },
  { {IceCandidatePairConfig_IceCandidatePairConfigType_names + 5, 9}, 3 },
  { {IceCandidatePairConfig_IceCandidatePairConfigType_names + 14, 8}, 4 },
  { {IceCandidatePairConfig_IceCandidatePairConfigType_names + 22, 19}, 0 },
  { {IceCandidatePairConfig_IceCandidatePairConfigType_names + 41, 7}, 2 },
};

static const int IceCandidatePairConfig_IceCandidatePairConfigType_entries_by_number[] = {
  3, // 0 -> UNKNOWN_CONFIG_TYPE
  0, // 1 -> ADDED
  4, // 2 -> UPDATED
  1, // 3 -> DESTROYED
  2, // 4 -> SELECTED
};

const std::string& IceCandidatePairConfig_IceCandidatePairConfigType_Name(
    IceCandidatePairConfig_IceCandidatePairConfigType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IceCandidatePairConfig_IceCandidatePairConfigType_entries,
          IceCandidatePairConfig_IceCandidatePairConfigType_entries_by_number,
          5, IceCandidatePairConfig_IceCandidatePairConfigType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IceCandidatePairConfig_IceCandidatePairConfigType_entries,
      IceCandidatePairConfig_IceCandidatePairConfigType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     IceCandidatePairConfig_IceCandidatePairConfigType_strings[idx].get();
}
bool IceCandidatePairConfig_IceCandidatePairConfigType_Parse(
    const std::string& name, IceCandidatePairConfig_IceCandidatePairConfigType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IceCandidatePairConfig_IceCandidatePairConfigType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairConfig_IceCandidatePairConfigType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::UNKNOWN_CONFIG_TYPE;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::ADDED;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::UPDATED;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::DESTROYED;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::SELECTED;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::IceCandidatePairConfigType_MIN;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::IceCandidatePairConfigType_MAX;
constexpr int IceCandidatePairConfig::IceCandidatePairConfigType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool IceCandidatePairConfig_IceCandidateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IceCandidatePairConfig_IceCandidateType_strings[5] = {};

static const char IceCandidatePairConfig_IceCandidateType_names[] =
  "LOCAL"
  "PRFLX"
  "RELAY"
  "STUN"
  "UNKNOWN_CANDIDATE_TYPE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IceCandidatePairConfig_IceCandidateType_entries[] = {
  { {IceCandidatePairConfig_IceCandidateType_names + 0, 5}, 1 },
  { {IceCandidatePairConfig_IceCandidateType_names + 5, 5}, 3 },
  { {IceCandidatePairConfig_IceCandidateType_names + 10, 5}, 4 },
  { {IceCandidatePairConfig_IceCandidateType_names + 15, 4}, 2 },
  { {IceCandidatePairConfig_IceCandidateType_names + 19, 22}, 0 },
};

static const int IceCandidatePairConfig_IceCandidateType_entries_by_number[] = {
  4, // 0 -> UNKNOWN_CANDIDATE_TYPE
  0, // 1 -> LOCAL
  3, // 2 -> STUN
  1, // 3 -> PRFLX
  2, // 4 -> RELAY
};

const std::string& IceCandidatePairConfig_IceCandidateType_Name(
    IceCandidatePairConfig_IceCandidateType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IceCandidatePairConfig_IceCandidateType_entries,
          IceCandidatePairConfig_IceCandidateType_entries_by_number,
          5, IceCandidatePairConfig_IceCandidateType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IceCandidatePairConfig_IceCandidateType_entries,
      IceCandidatePairConfig_IceCandidateType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     IceCandidatePairConfig_IceCandidateType_strings[idx].get();
}
bool IceCandidatePairConfig_IceCandidateType_Parse(
    const std::string& name, IceCandidatePairConfig_IceCandidateType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IceCandidatePairConfig_IceCandidateType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairConfig_IceCandidateType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::UNKNOWN_CANDIDATE_TYPE;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::LOCAL;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::STUN;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::PRFLX;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::RELAY;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::IceCandidateType_MIN;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::IceCandidateType_MAX;
constexpr int IceCandidatePairConfig::IceCandidateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool IceCandidatePairConfig_Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IceCandidatePairConfig_Protocol_strings[5] = {};

static const char IceCandidatePairConfig_Protocol_names[] =
  "SSLTCP"
  "TCP"
  "TLS"
  "UDP"
  "UNKNOWN_PROTOCOL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IceCandidatePairConfig_Protocol_entries[] = {
  { {IceCandidatePairConfig_Protocol_names + 0, 6}, 3 },
  { {IceCandidatePairConfig_Protocol_names + 6, 3}, 2 },
  { {IceCandidatePairConfig_Protocol_names + 9, 3}, 4 },
  { {IceCandidatePairConfig_Protocol_names + 12, 3}, 1 },
  { {IceCandidatePairConfig_Protocol_names + 15, 16}, 0 },
};

static const int IceCandidatePairConfig_Protocol_entries_by_number[] = {
  4, // 0 -> UNKNOWN_PROTOCOL
  3, // 1 -> UDP
  1, // 2 -> TCP
  0, // 3 -> SSLTCP
  2, // 4 -> TLS
};

const std::string& IceCandidatePairConfig_Protocol_Name(
    IceCandidatePairConfig_Protocol value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IceCandidatePairConfig_Protocol_entries,
          IceCandidatePairConfig_Protocol_entries_by_number,
          5, IceCandidatePairConfig_Protocol_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IceCandidatePairConfig_Protocol_entries,
      IceCandidatePairConfig_Protocol_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     IceCandidatePairConfig_Protocol_strings[idx].get();
}
bool IceCandidatePairConfig_Protocol_Parse(
    const std::string& name, IceCandidatePairConfig_Protocol* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IceCandidatePairConfig_Protocol_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairConfig_Protocol>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::UNKNOWN_PROTOCOL;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::UDP;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::TCP;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::SSLTCP;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::TLS;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::Protocol_MIN;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::Protocol_MAX;
constexpr int IceCandidatePairConfig::Protocol_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool IceCandidatePairConfig_AddressFamily_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IceCandidatePairConfig_AddressFamily_strings[3] = {};

static const char IceCandidatePairConfig_AddressFamily_names[] =
  "IPV4"
  "IPV6"
  "UNKNOWN_ADDRESS_FAMILY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IceCandidatePairConfig_AddressFamily_entries[] = {
  { {IceCandidatePairConfig_AddressFamily_names + 0, 4}, 1 },
  { {IceCandidatePairConfig_AddressFamily_names + 4, 4}, 2 },
  { {IceCandidatePairConfig_AddressFamily_names + 8, 22}, 0 },
};

static const int IceCandidatePairConfig_AddressFamily_entries_by_number[] = {
  2, // 0 -> UNKNOWN_ADDRESS_FAMILY
  0, // 1 -> IPV4
  1, // 2 -> IPV6
};

const std::string& IceCandidatePairConfig_AddressFamily_Name(
    IceCandidatePairConfig_AddressFamily value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IceCandidatePairConfig_AddressFamily_entries,
          IceCandidatePairConfig_AddressFamily_entries_by_number,
          3, IceCandidatePairConfig_AddressFamily_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IceCandidatePairConfig_AddressFamily_entries,
      IceCandidatePairConfig_AddressFamily_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     IceCandidatePairConfig_AddressFamily_strings[idx].get();
}
bool IceCandidatePairConfig_AddressFamily_Parse(
    const std::string& name, IceCandidatePairConfig_AddressFamily* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IceCandidatePairConfig_AddressFamily_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairConfig_AddressFamily>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::UNKNOWN_ADDRESS_FAMILY;
constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::IPV4;
constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::IPV6;
constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::AddressFamily_MIN;
constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::AddressFamily_MAX;
constexpr int IceCandidatePairConfig::AddressFamily_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool IceCandidatePairConfig_NetworkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IceCandidatePairConfig_NetworkType_strings[6] = {};

static const char IceCandidatePairConfig_NetworkType_names[] =
  "CELLULAR"
  "ETHERNET"
  "LOOPBACK"
  "UNKNOWN_NETWORK_TYPE"
  "VPN"
  "WIFI";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IceCandidatePairConfig_NetworkType_entries[] = {
  { {IceCandidatePairConfig_NetworkType_names + 0, 8}, 3 },
  { {IceCandidatePairConfig_NetworkType_names + 8, 8}, 1 },
  { {IceCandidatePairConfig_NetworkType_names + 16, 8}, 5 },
  { {IceCandidatePairConfig_NetworkType_names + 24, 20}, 0 },
  { {IceCandidatePairConfig_NetworkType_names + 44, 3}, 4 },
  { {IceCandidatePairConfig_NetworkType_names + 47, 4}, 2 },
};

static const int IceCandidatePairConfig_NetworkType_entries_by_number[] = {
  3, // 0 -> UNKNOWN_NETWORK_TYPE
  1, // 1 -> ETHERNET
  5, // 2 -> WIFI
  0, // 3 -> CELLULAR
  4, // 4 -> VPN
  2, // 5 -> LOOPBACK
};

const std::string& IceCandidatePairConfig_NetworkType_Name(
    IceCandidatePairConfig_NetworkType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IceCandidatePairConfig_NetworkType_entries,
          IceCandidatePairConfig_NetworkType_entries_by_number,
          6, IceCandidatePairConfig_NetworkType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IceCandidatePairConfig_NetworkType_entries,
      IceCandidatePairConfig_NetworkType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     IceCandidatePairConfig_NetworkType_strings[idx].get();
}
bool IceCandidatePairConfig_NetworkType_Parse(
    const std::string& name, IceCandidatePairConfig_NetworkType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IceCandidatePairConfig_NetworkType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairConfig_NetworkType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::UNKNOWN_NETWORK_TYPE;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::ETHERNET;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::WIFI;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::CELLULAR;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::VPN;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::LOOPBACK;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::NetworkType_MIN;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::NetworkType_MAX;
constexpr int IceCandidatePairConfig::NetworkType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool IceCandidatePairEvent_IceCandidatePairEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IceCandidatePairEvent_IceCandidatePairEventType_strings[5] = {};

static const char IceCandidatePairEvent_IceCandidatePairEventType_names[] =
  "CHECK_RECEIVED"
  "CHECK_RESPONSE_RECEIVED"
  "CHECK_RESPONSE_SENT"
  "CHECK_SENT"
  "UNKNOWN_CHECK_TYPE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IceCandidatePairEvent_IceCandidatePairEventType_entries[] = {
  { {IceCandidatePairEvent_IceCandidatePairEventType_names + 0, 14}, 2 },
  { {IceCandidatePairEvent_IceCandidatePairEventType_names + 14, 23}, 4 },
  { {IceCandidatePairEvent_IceCandidatePairEventType_names + 37, 19}, 3 },
  { {IceCandidatePairEvent_IceCandidatePairEventType_names + 56, 10}, 1 },
  { {IceCandidatePairEvent_IceCandidatePairEventType_names + 66, 18}, 0 },
};

static const int IceCandidatePairEvent_IceCandidatePairEventType_entries_by_number[] = {
  4, // 0 -> UNKNOWN_CHECK_TYPE
  3, // 1 -> CHECK_SENT
  0, // 2 -> CHECK_RECEIVED
  2, // 3 -> CHECK_RESPONSE_SENT
  1, // 4 -> CHECK_RESPONSE_RECEIVED
};

const std::string& IceCandidatePairEvent_IceCandidatePairEventType_Name(
    IceCandidatePairEvent_IceCandidatePairEventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IceCandidatePairEvent_IceCandidatePairEventType_entries,
          IceCandidatePairEvent_IceCandidatePairEventType_entries_by_number,
          5, IceCandidatePairEvent_IceCandidatePairEventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IceCandidatePairEvent_IceCandidatePairEventType_entries,
      IceCandidatePairEvent_IceCandidatePairEventType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     IceCandidatePairEvent_IceCandidatePairEventType_strings[idx].get();
}
bool IceCandidatePairEvent_IceCandidatePairEventType_Parse(
    const std::string& name, IceCandidatePairEvent_IceCandidatePairEventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IceCandidatePairEvent_IceCandidatePairEventType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairEvent_IceCandidatePairEventType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::UNKNOWN_CHECK_TYPE;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_SENT;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_RECEIVED;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_RESPONSE_SENT;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_RESPONSE_RECEIVED;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::IceCandidatePairEventType_MIN;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::IceCandidatePairEventType_MAX;
constexpr int IceCandidatePairEvent::IceCandidatePairEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DtlsTransportStateEvent_DtlsTransportState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DtlsTransportStateEvent_DtlsTransportState_strings[6] = {};

static const char DtlsTransportStateEvent_DtlsTransportState_names[] =
  "DTLS_TRANSPORT_CLOSED"
  "DTLS_TRANSPORT_CONNECTED"
  "DTLS_TRANSPORT_CONNECTING"
  "DTLS_TRANSPORT_FAILED"
  "DTLS_TRANSPORT_NEW"
  "UNKNOWN_DTLS_TRANSPORT_STATE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DtlsTransportStateEvent_DtlsTransportState_entries[] = {
  { {DtlsTransportStateEvent_DtlsTransportState_names + 0, 21}, 4 },
  { {DtlsTransportStateEvent_DtlsTransportState_names + 21, 24}, 3 },
  { {DtlsTransportStateEvent_DtlsTransportState_names + 45, 25}, 2 },
  { {DtlsTransportStateEvent_DtlsTransportState_names + 70, 21}, 5 },
  { {DtlsTransportStateEvent_DtlsTransportState_names + 91, 18}, 1 },
  { {DtlsTransportStateEvent_DtlsTransportState_names + 109, 28}, 0 },
};

static const int DtlsTransportStateEvent_DtlsTransportState_entries_by_number[] = {
  5, // 0 -> UNKNOWN_DTLS_TRANSPORT_STATE
  4, // 1 -> DTLS_TRANSPORT_NEW
  2, // 2 -> DTLS_TRANSPORT_CONNECTING
  1, // 3 -> DTLS_TRANSPORT_CONNECTED
  0, // 4 -> DTLS_TRANSPORT_CLOSED
  3, // 5 -> DTLS_TRANSPORT_FAILED
};

const std::string& DtlsTransportStateEvent_DtlsTransportState_Name(
    DtlsTransportStateEvent_DtlsTransportState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DtlsTransportStateEvent_DtlsTransportState_entries,
          DtlsTransportStateEvent_DtlsTransportState_entries_by_number,
          6, DtlsTransportStateEvent_DtlsTransportState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DtlsTransportStateEvent_DtlsTransportState_entries,
      DtlsTransportStateEvent_DtlsTransportState_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DtlsTransportStateEvent_DtlsTransportState_strings[idx].get();
}
bool DtlsTransportStateEvent_DtlsTransportState_Parse(
    const std::string& name, DtlsTransportStateEvent_DtlsTransportState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DtlsTransportStateEvent_DtlsTransportState_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<DtlsTransportStateEvent_DtlsTransportState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::UNKNOWN_DTLS_TRANSPORT_STATE;
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DTLS_TRANSPORT_NEW;
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DTLS_TRANSPORT_CONNECTING;
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DTLS_TRANSPORT_CONNECTED;
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DTLS_TRANSPORT_CLOSED;
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DTLS_TRANSPORT_FAILED;
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DtlsTransportState_MIN;
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DtlsTransportState_MAX;
constexpr int DtlsTransportStateEvent::DtlsTransportState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void EventStream::InitAsDefaultInstance() {
}
class EventStream::_Internal {
 public:
  using HasBits = decltype(std::declval<EventStream>()._has_bits_);
};

EventStream::EventStream()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.EventStream)
}
EventStream::EventStream(const EventStream& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stream_(from.stream_),
      incoming_rtp_packets_(from.incoming_rtp_packets_),
      outgoing_rtp_packets_(from.outgoing_rtp_packets_),
      incoming_rtcp_packets_(from.incoming_rtcp_packets_),
      outgoing_rtcp_packets_(from.outgoing_rtcp_packets_),
      audio_playout_events_(from.audio_playout_events_),
      frame_decoded_events_(from.frame_decoded_events_),
      begin_log_events_(from.begin_log_events_),
      end_log_events_(from.end_log_events_),
      loss_based_bwe_updates_(from.loss_based_bwe_updates_),
      delay_based_bwe_updates_(from.delay_based_bwe_updates_),
      audio_network_adaptations_(from.audio_network_adaptations_),
      probe_clusters_(from.probe_clusters_),
      probe_success_(from.probe_success_),
      probe_failure_(from.probe_failure_),
      alr_states_(from.alr_states_),
      ice_candidate_configs_(from.ice_candidate_configs_),
      ice_candidate_events_(from.ice_candidate_events_),
      dtls_transport_state_events_(from.dtls_transport_state_events_),
      dtls_writable_states_(from.dtls_writable_states_),
      generic_packets_sent_(from.generic_packets_sent_),
      generic_packets_received_(from.generic_packets_received_),
      generic_acks_received_(from.generic_acks_received_),
      route_changes_(from.route_changes_),
      remote_estimates_(from.remote_estimates_),
      audio_recv_stream_configs_(from.audio_recv_stream_configs_),
      audio_send_stream_configs_(from.audio_send_stream_configs_),
      video_recv_stream_configs_(from.video_recv_stream_configs_),
      video_send_stream_configs_(from.video_send_stream_configs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.EventStream)
}

void EventStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventStream_rtc_5fevent_5flog2_2eproto.base);
}

EventStream::~EventStream() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.EventStream)
  SharedDtor();
}

void EventStream::SharedDtor() {
}

void EventStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventStream& EventStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventStream_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void EventStream::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.EventStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_.Clear();
  incoming_rtp_packets_.Clear();
  outgoing_rtp_packets_.Clear();
  incoming_rtcp_packets_.Clear();
  outgoing_rtcp_packets_.Clear();
  audio_playout_events_.Clear();
  frame_decoded_events_.Clear();
  begin_log_events_.Clear();
  end_log_events_.Clear();
  loss_based_bwe_updates_.Clear();
  delay_based_bwe_updates_.Clear();
  audio_network_adaptations_.Clear();
  probe_clusters_.Clear();
  probe_success_.Clear();
  probe_failure_.Clear();
  alr_states_.Clear();
  ice_candidate_configs_.Clear();
  ice_candidate_events_.Clear();
  dtls_transport_state_events_.Clear();
  dtls_writable_states_.Clear();
  generic_packets_sent_.Clear();
  generic_packets_received_.Clear();
  generic_acks_received_.Clear();
  route_changes_.Clear();
  remote_estimates_.Clear();
  audio_recv_stream_configs_.Clear();
  audio_send_stream_configs_.Clear();
  video_recv_stream_configs_.Clear();
  video_send_stream_configs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stream(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_incoming_rtp_packets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_outgoing_rtp_packets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_incoming_rtcp_packets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_outgoing_rtcp_packets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_audio_playout_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.FrameDecodedEvents frame_decoded_events = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_frame_decoded_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_begin_log_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 386);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_end_log_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 394);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_loss_based_bwe_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 402);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_delay_based_bwe_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 410);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_audio_network_adaptations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 418);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_probe_clusters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 426);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_probe_success(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 434);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_probe_failure(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 442);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.AlrState alr_states = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_alr_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 450);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.IceCandidatePairConfig ice_candidate_configs = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_ice_candidate_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 458);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.IceCandidatePairEvent ice_candidate_events = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_ice_candidate_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 466);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.DtlsTransportStateEvent dtls_transport_state_events = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_dtls_transport_state_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 474);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.DtlsWritableState dtls_writable_states = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_dtls_writable_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 482);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.GenericPacketSent generic_packets_sent = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_generic_packets_sent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 490);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.GenericPacketReceived generic_packets_received = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_generic_packets_received(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 498);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.GenericAckReceived generic_acks_received = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_generic_acks_received(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 506);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.RouteChange route_changes = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_route_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 642);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.RemoteEstimates remote_estimates = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_remote_estimates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 650);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_audio_recv_stream_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 1706);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_audio_send_stream_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 1714);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_video_recv_stream_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 1722);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_video_send_stream_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 1730);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventStream::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.EventStream)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_incoming_rtp_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_outgoing_rtp_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_incoming_rtcp_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_outgoing_rtcp_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_audio_playout_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.FrameDecodedEvents frame_decoded_events = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_frame_decoded_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_begin_log_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_end_log_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_loss_based_bwe_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_delay_based_bwe_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_audio_network_adaptations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_probe_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_probe_success()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_probe_failure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.AlrState alr_states = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_alr_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.IceCandidatePairConfig ice_candidate_configs = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ice_candidate_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.IceCandidatePairEvent ice_candidate_events = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ice_candidate_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.DtlsTransportStateEvent dtls_transport_state_events = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_dtls_transport_state_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.DtlsWritableState dtls_writable_states = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_dtls_writable_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.GenericPacketSent generic_packets_sent = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_generic_packets_sent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.GenericPacketReceived generic_packets_received = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_generic_packets_received()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.GenericAckReceived generic_acks_received = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_generic_acks_received()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.RouteChange route_changes = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_route_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.RemoteEstimates remote_estimates = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_remote_estimates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_audio_recv_stream_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_audio_send_stream_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
      case 103: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_video_recv_stream_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
      case 104: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (834 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_video_send_stream_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.EventStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.EventStream)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventStream::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.EventStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stream_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->stream(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->incoming_rtp_packets_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->incoming_rtp_packets(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outgoing_rtp_packets_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->outgoing_rtp_packets(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->incoming_rtcp_packets_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->incoming_rtcp_packets(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outgoing_rtcp_packets_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->outgoing_rtcp_packets(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audio_playout_events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->audio_playout_events(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.FrameDecodedEvents frame_decoded_events = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frame_decoded_events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->frame_decoded_events(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->begin_log_events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16,
      this->begin_log_events(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_log_events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17,
      this->end_log_events(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->loss_based_bwe_updates_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18,
      this->loss_based_bwe_updates(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->delay_based_bwe_updates_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      19,
      this->delay_based_bwe_updates(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audio_network_adaptations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20,
      this->audio_network_adaptations(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->probe_clusters_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21,
      this->probe_clusters(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->probe_success_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      22,
      this->probe_success(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->probe_failure_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      23,
      this->probe_failure(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.AlrState alr_states = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alr_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      24,
      this->alr_states(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.IceCandidatePairConfig ice_candidate_configs = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ice_candidate_configs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25,
      this->ice_candidate_configs(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.IceCandidatePairEvent ice_candidate_events = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ice_candidate_events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      26,
      this->ice_candidate_events(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.DtlsTransportStateEvent dtls_transport_state_events = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dtls_transport_state_events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      27,
      this->dtls_transport_state_events(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.DtlsWritableState dtls_writable_states = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dtls_writable_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      28,
      this->dtls_writable_states(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.GenericPacketSent generic_packets_sent = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->generic_packets_sent_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      29,
      this->generic_packets_sent(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.GenericPacketReceived generic_packets_received = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->generic_packets_received_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      30,
      this->generic_packets_received(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.GenericAckReceived generic_acks_received = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->generic_acks_received_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      31,
      this->generic_acks_received(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.RouteChange route_changes = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_changes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      32,
      this->route_changes(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.RemoteEstimates remote_estimates = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->remote_estimates_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      33,
      this->remote_estimates(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audio_recv_stream_configs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      101,
      this->audio_recv_stream_configs(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audio_send_stream_configs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      102,
      this->audio_send_stream_configs(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->video_recv_stream_configs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      103,
      this->video_recv_stream_configs(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->video_send_stream_configs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      104,
      this->video_send_stream_configs(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.EventStream)
}

size_t EventStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.EventStream)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->stream_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stream(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->incoming_rtp_packets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->incoming_rtp_packets(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->outgoing_rtp_packets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->outgoing_rtp_packets(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->incoming_rtcp_packets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->incoming_rtcp_packets(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->outgoing_rtcp_packets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->outgoing_rtcp_packets(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->audio_playout_events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->audio_playout_events(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.FrameDecodedEvents frame_decoded_events = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->frame_decoded_events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->frame_decoded_events(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->begin_log_events_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->begin_log_events(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->end_log_events_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->end_log_events(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->loss_based_bwe_updates_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->loss_based_bwe_updates(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->delay_based_bwe_updates_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->delay_based_bwe_updates(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->audio_network_adaptations_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->audio_network_adaptations(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->probe_clusters_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->probe_clusters(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->probe_success_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->probe_success(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->probe_failure_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->probe_failure(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.AlrState alr_states = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->alr_states_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->alr_states(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.IceCandidatePairConfig ice_candidate_configs = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->ice_candidate_configs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ice_candidate_configs(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.IceCandidatePairEvent ice_candidate_events = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->ice_candidate_events_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ice_candidate_events(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.DtlsTransportStateEvent dtls_transport_state_events = 27;
  {
    unsigned int count = static_cast<unsigned int>(this->dtls_transport_state_events_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->dtls_transport_state_events(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.DtlsWritableState dtls_writable_states = 28;
  {
    unsigned int count = static_cast<unsigned int>(this->dtls_writable_states_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->dtls_writable_states(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.GenericPacketSent generic_packets_sent = 29;
  {
    unsigned int count = static_cast<unsigned int>(this->generic_packets_sent_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->generic_packets_sent(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.GenericPacketReceived generic_packets_received = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->generic_packets_received_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->generic_packets_received(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.GenericAckReceived generic_acks_received = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->generic_acks_received_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->generic_acks_received(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.RouteChange route_changes = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->route_changes_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->route_changes(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.RemoteEstimates remote_estimates = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->remote_estimates_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->remote_estimates(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
  {
    unsigned int count = static_cast<unsigned int>(this->audio_recv_stream_configs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->audio_recv_stream_configs(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
  {
    unsigned int count = static_cast<unsigned int>(this->audio_send_stream_configs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->audio_send_stream_configs(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
  {
    unsigned int count = static_cast<unsigned int>(this->video_recv_stream_configs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->video_recv_stream_configs(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
  {
    unsigned int count = static_cast<unsigned int>(this->video_send_stream_configs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->video_send_stream_configs(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventStream::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EventStream*>(
      &from));
}

void EventStream::MergeFrom(const EventStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.EventStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stream_.MergeFrom(from.stream_);
  incoming_rtp_packets_.MergeFrom(from.incoming_rtp_packets_);
  outgoing_rtp_packets_.MergeFrom(from.outgoing_rtp_packets_);
  incoming_rtcp_packets_.MergeFrom(from.incoming_rtcp_packets_);
  outgoing_rtcp_packets_.MergeFrom(from.outgoing_rtcp_packets_);
  audio_playout_events_.MergeFrom(from.audio_playout_events_);
  frame_decoded_events_.MergeFrom(from.frame_decoded_events_);
  begin_log_events_.MergeFrom(from.begin_log_events_);
  end_log_events_.MergeFrom(from.end_log_events_);
  loss_based_bwe_updates_.MergeFrom(from.loss_based_bwe_updates_);
  delay_based_bwe_updates_.MergeFrom(from.delay_based_bwe_updates_);
  audio_network_adaptations_.MergeFrom(from.audio_network_adaptations_);
  probe_clusters_.MergeFrom(from.probe_clusters_);
  probe_success_.MergeFrom(from.probe_success_);
  probe_failure_.MergeFrom(from.probe_failure_);
  alr_states_.MergeFrom(from.alr_states_);
  ice_candidate_configs_.MergeFrom(from.ice_candidate_configs_);
  ice_candidate_events_.MergeFrom(from.ice_candidate_events_);
  dtls_transport_state_events_.MergeFrom(from.dtls_transport_state_events_);
  dtls_writable_states_.MergeFrom(from.dtls_writable_states_);
  generic_packets_sent_.MergeFrom(from.generic_packets_sent_);
  generic_packets_received_.MergeFrom(from.generic_packets_received_);
  generic_acks_received_.MergeFrom(from.generic_acks_received_);
  route_changes_.MergeFrom(from.route_changes_);
  remote_estimates_.MergeFrom(from.remote_estimates_);
  audio_recv_stream_configs_.MergeFrom(from.audio_recv_stream_configs_);
  audio_send_stream_configs_.MergeFrom(from.audio_send_stream_configs_);
  video_recv_stream_configs_.MergeFrom(from.video_recv_stream_configs_);
  video_send_stream_configs_.MergeFrom(from.video_send_stream_configs_);
}

void EventStream::CopyFrom(const EventStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.EventStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventStream::IsInitialized() const {
  return true;
}

void EventStream::InternalSwap(EventStream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stream_)->InternalSwap(CastToBase(&other->stream_));
  CastToBase(&incoming_rtp_packets_)->InternalSwap(CastToBase(&other->incoming_rtp_packets_));
  CastToBase(&outgoing_rtp_packets_)->InternalSwap(CastToBase(&other->outgoing_rtp_packets_));
  CastToBase(&incoming_rtcp_packets_)->InternalSwap(CastToBase(&other->incoming_rtcp_packets_));
  CastToBase(&outgoing_rtcp_packets_)->InternalSwap(CastToBase(&other->outgoing_rtcp_packets_));
  CastToBase(&audio_playout_events_)->InternalSwap(CastToBase(&other->audio_playout_events_));
  CastToBase(&frame_decoded_events_)->InternalSwap(CastToBase(&other->frame_decoded_events_));
  CastToBase(&begin_log_events_)->InternalSwap(CastToBase(&other->begin_log_events_));
  CastToBase(&end_log_events_)->InternalSwap(CastToBase(&other->end_log_events_));
  CastToBase(&loss_based_bwe_updates_)->InternalSwap(CastToBase(&other->loss_based_bwe_updates_));
  CastToBase(&delay_based_bwe_updates_)->InternalSwap(CastToBase(&other->delay_based_bwe_updates_));
  CastToBase(&audio_network_adaptations_)->InternalSwap(CastToBase(&other->audio_network_adaptations_));
  CastToBase(&probe_clusters_)->InternalSwap(CastToBase(&other->probe_clusters_));
  CastToBase(&probe_success_)->InternalSwap(CastToBase(&other->probe_success_));
  CastToBase(&probe_failure_)->InternalSwap(CastToBase(&other->probe_failure_));
  CastToBase(&alr_states_)->InternalSwap(CastToBase(&other->alr_states_));
  CastToBase(&ice_candidate_configs_)->InternalSwap(CastToBase(&other->ice_candidate_configs_));
  CastToBase(&ice_candidate_events_)->InternalSwap(CastToBase(&other->ice_candidate_events_));
  CastToBase(&dtls_transport_state_events_)->InternalSwap(CastToBase(&other->dtls_transport_state_events_));
  CastToBase(&dtls_writable_states_)->InternalSwap(CastToBase(&other->dtls_writable_states_));
  CastToBase(&generic_packets_sent_)->InternalSwap(CastToBase(&other->generic_packets_sent_));
  CastToBase(&generic_packets_received_)->InternalSwap(CastToBase(&other->generic_packets_received_));
  CastToBase(&generic_acks_received_)->InternalSwap(CastToBase(&other->generic_acks_received_));
  CastToBase(&route_changes_)->InternalSwap(CastToBase(&other->route_changes_));
  CastToBase(&remote_estimates_)->InternalSwap(CastToBase(&other->remote_estimates_));
  CastToBase(&audio_recv_stream_configs_)->InternalSwap(CastToBase(&other->audio_recv_stream_configs_));
  CastToBase(&audio_send_stream_configs_)->InternalSwap(CastToBase(&other->audio_send_stream_configs_));
  CastToBase(&video_recv_stream_configs_)->InternalSwap(CastToBase(&other->video_recv_stream_configs_));
  CastToBase(&video_send_stream_configs_)->InternalSwap(CastToBase(&other->video_send_stream_configs_));
}

std::string EventStream::GetTypeName() const {
  return "webrtc.rtclog2.EventStream";
}


// ===================================================================

void Event::InitAsDefaultInstance() {
}
class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._has_bits_);
};

Event::Event()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.Event)
}

void Event::SharedCtor() {
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.Event)
  SharedDtor();
}

void Event::SharedDtor() {
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Event::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.Event)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.Event)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Event::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.Event)
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.Event)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Event*>(
      &from));
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string Event::GetTypeName() const {
  return "webrtc.rtclog2.Event";
}


// ===================================================================

void GenericPacketReceived::InitAsDefaultInstance() {
}
class GenericPacketReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericPacketReceived>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_packet_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_packet_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_packet_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_packet_length_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GenericPacketReceived::GenericPacketReceived()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.GenericPacketReceived)
}
GenericPacketReceived::GenericPacketReceived(const GenericPacketReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  packet_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_packet_number_deltas()) {
    packet_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.packet_number_deltas_);
  }
  packet_length_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_packet_length_deltas()) {
    packet_length_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.packet_length_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.GenericPacketReceived)
}

void GenericPacketReceived::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericPacketReceived_rtc_5fevent_5flog2_2eproto.base);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packet_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packet_length_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

GenericPacketReceived::~GenericPacketReceived() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.GenericPacketReceived)
  SharedDtor();
}

void GenericPacketReceived::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packet_number_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packet_length_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenericPacketReceived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericPacketReceived& GenericPacketReceived::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericPacketReceived_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void GenericPacketReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.GenericPacketReceived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      packet_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      packet_length_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenericPacketReceived::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 packet_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_packet_number(&has_bits);
          packet_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 packet_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_packet_length(&has_bits);
          packet_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_deltas = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes timestamp_ms_deltas = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_timestamp_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes packet_number_deltas = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_packet_number_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes packet_length_deltas = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_packet_length_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenericPacketReceived::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.GenericPacketReceived)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 packet_number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_packet_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &packet_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 packet_length = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_packet_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_number_of_deltas(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes packet_number_deltas = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes packet_length_deltas = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet_length_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.GenericPacketReceived)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.GenericPacketReceived)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenericPacketReceived::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.GenericPacketReceived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional int64 packet_number = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->packet_number(), output);
  }

  // optional int32 packet_length = 3;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->packet_length(), output);
  }

  // optional uint32 number_of_deltas = 16;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(16, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 17;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->timestamp_ms_deltas(), output);
  }

  // optional bytes packet_number_deltas = 18;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->packet_number_deltas(), output);
  }

  // optional bytes packet_length_deltas = 19;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->packet_length_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.GenericPacketReceived)
}

size_t GenericPacketReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.GenericPacketReceived)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes timestamp_ms_deltas = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes packet_number_deltas = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->packet_number_deltas());
    }

    // optional bytes packet_length_deltas = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->packet_length_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional int64 packet_number = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->packet_number());
    }

    // optional int32 packet_length = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->packet_length());
    }

    // optional uint32 number_of_deltas = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericPacketReceived::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GenericPacketReceived*>(
      &from));
}

void GenericPacketReceived::MergeFrom(const GenericPacketReceived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.GenericPacketReceived)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      packet_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.packet_number_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      packet_length_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.packet_length_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      packet_number_ = from.packet_number_;
    }
    if (cached_has_bits & 0x00000020u) {
      packet_length_ = from.packet_length_;
    }
    if (cached_has_bits & 0x00000040u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GenericPacketReceived::CopyFrom(const GenericPacketReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.GenericPacketReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericPacketReceived::IsInitialized() const {
  return true;
}

void GenericPacketReceived::InternalSwap(GenericPacketReceived* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  packet_number_deltas_.Swap(&other->packet_number_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  packet_length_deltas_.Swap(&other->packet_length_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(packet_number_, other->packet_number_);
  swap(packet_length_, other->packet_length_);
  swap(number_of_deltas_, other->number_of_deltas_);
}

std::string GenericPacketReceived::GetTypeName() const {
  return "webrtc.rtclog2.GenericPacketReceived";
}


// ===================================================================

void GenericPacketSent::InitAsDefaultInstance() {
}
class GenericPacketSent::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericPacketSent>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_packet_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_overhead_length(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_payload_length(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_padding_length(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_packet_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_overhead_length_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload_length_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_padding_length_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

GenericPacketSent::GenericPacketSent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.GenericPacketSent)
}
GenericPacketSent::GenericPacketSent(const GenericPacketSent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  packet_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_packet_number_deltas()) {
    packet_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.packet_number_deltas_);
  }
  overhead_length_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_overhead_length_deltas()) {
    overhead_length_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.overhead_length_deltas_);
  }
  payload_length_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_length_deltas()) {
    payload_length_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_length_deltas_);
  }
  padding_length_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_padding_length_deltas()) {
    padding_length_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.padding_length_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.GenericPacketSent)
}

void GenericPacketSent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericPacketSent_rtc_5fevent_5flog2_2eproto.base);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packet_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  overhead_length_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_length_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  padding_length_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

GenericPacketSent::~GenericPacketSent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.GenericPacketSent)
  SharedDtor();
}

void GenericPacketSent::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packet_number_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  overhead_length_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_length_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  padding_length_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenericPacketSent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericPacketSent& GenericPacketSent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericPacketSent_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void GenericPacketSent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.GenericPacketSent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      packet_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      overhead_length_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      payload_length_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      padding_length_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&overhead_length_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(overhead_length_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&payload_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&payload_length_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenericPacketSent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 packet_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_packet_number(&has_bits);
          packet_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 overhead_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_overhead_length(&has_bits);
          overhead_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 payload_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_payload_length(&has_bits);
          payload_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 padding_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_padding_length(&has_bits);
          padding_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_deltas = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes timestamp_ms_deltas = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_timestamp_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes packet_number_deltas = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_packet_number_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes overhead_length_deltas = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_overhead_length_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes payload_length_deltas = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_payload_length_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes padding_length_deltas = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_padding_length_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenericPacketSent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.GenericPacketSent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 packet_number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_packet_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &packet_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 overhead_length = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_overhead_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &overhead_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 payload_length = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_payload_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &payload_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 padding_length = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_padding_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &padding_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_number_of_deltas(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes packet_number_deltas = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes overhead_length_deltas = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_overhead_length_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload_length_deltas = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_length_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes padding_length_deltas = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_padding_length_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.GenericPacketSent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.GenericPacketSent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenericPacketSent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.GenericPacketSent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional int64 packet_number = 2;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->packet_number(), output);
  }

  // optional int32 overhead_length = 3;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->overhead_length(), output);
  }

  // optional int32 payload_length = 4;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->payload_length(), output);
  }

  // optional int32 padding_length = 5;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->padding_length(), output);
  }

  // optional uint32 number_of_deltas = 16;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(16, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 17;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->timestamp_ms_deltas(), output);
  }

  // optional bytes packet_number_deltas = 18;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->packet_number_deltas(), output);
  }

  // optional bytes overhead_length_deltas = 19;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->overhead_length_deltas(), output);
  }

  // optional bytes payload_length_deltas = 20;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->payload_length_deltas(), output);
  }

  // optional bytes padding_length_deltas = 21;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->padding_length_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.GenericPacketSent)
}

size_t GenericPacketSent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.GenericPacketSent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes timestamp_ms_deltas = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes packet_number_deltas = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->packet_number_deltas());
    }

    // optional bytes overhead_length_deltas = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->overhead_length_deltas());
    }

    // optional bytes payload_length_deltas = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->payload_length_deltas());
    }

    // optional bytes padding_length_deltas = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->padding_length_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional int64 packet_number = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->packet_number());
    }

    // optional int32 overhead_length = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->overhead_length());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 payload_length = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->payload_length());
    }

    // optional int32 padding_length = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->padding_length());
    }

    // optional uint32 number_of_deltas = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericPacketSent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GenericPacketSent*>(
      &from));
}

void GenericPacketSent::MergeFrom(const GenericPacketSent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.GenericPacketSent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      packet_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.packet_number_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      overhead_length_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.overhead_length_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      payload_length_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_length_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      padding_length_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.padding_length_deltas_);
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      packet_number_ = from.packet_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      overhead_length_ = from.overhead_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      payload_length_ = from.payload_length_;
    }
    if (cached_has_bits & 0x00000200u) {
      padding_length_ = from.padding_length_;
    }
    if (cached_has_bits & 0x00000400u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GenericPacketSent::CopyFrom(const GenericPacketSent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.GenericPacketSent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericPacketSent::IsInitialized() const {
  return true;
}

void GenericPacketSent::InternalSwap(GenericPacketSent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  packet_number_deltas_.Swap(&other->packet_number_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  overhead_length_deltas_.Swap(&other->overhead_length_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_length_deltas_.Swap(&other->payload_length_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  padding_length_deltas_.Swap(&other->padding_length_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(packet_number_, other->packet_number_);
  swap(overhead_length_, other->overhead_length_);
  swap(payload_length_, other->payload_length_);
  swap(padding_length_, other->padding_length_);
  swap(number_of_deltas_, other->number_of_deltas_);
}

std::string GenericPacketSent::GetTypeName() const {
  return "webrtc.rtclog2.GenericPacketSent";
}


// ===================================================================

void GenericAckReceived::InitAsDefaultInstance() {
}
class GenericAckReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericAckReceived>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_packet_number(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_acked_packet_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_receive_acked_packet_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_packet_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acked_packet_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_receive_acked_packet_time_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GenericAckReceived::GenericAckReceived()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.GenericAckReceived)
}
GenericAckReceived::GenericAckReceived(const GenericAckReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  packet_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_packet_number_deltas()) {
    packet_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.packet_number_deltas_);
  }
  acked_packet_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_acked_packet_number_deltas()) {
    acked_packet_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.acked_packet_number_deltas_);
  }
  receive_acked_packet_time_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_receive_acked_packet_time_ms_deltas()) {
    receive_acked_packet_time_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receive_acked_packet_time_ms_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.GenericAckReceived)
}

void GenericAckReceived::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericAckReceived_rtc_5fevent_5flog2_2eproto.base);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packet_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  acked_packet_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receive_acked_packet_time_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

GenericAckReceived::~GenericAckReceived() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.GenericAckReceived)
  SharedDtor();
}

void GenericAckReceived::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packet_number_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  acked_packet_number_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receive_acked_packet_time_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenericAckReceived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericAckReceived& GenericAckReceived::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericAckReceived_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void GenericAckReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.GenericAckReceived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      packet_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      acked_packet_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      receive_acked_packet_time_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&receive_acked_packet_time_ms_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(receive_acked_packet_time_ms_));
  }
  number_of_deltas_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenericAckReceived::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 packet_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_packet_number(&has_bits);
          packet_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 acked_packet_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_acked_packet_number(&has_bits);
          acked_packet_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 receive_acked_packet_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_receive_acked_packet_time_ms(&has_bits);
          receive_acked_packet_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_deltas = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes timestamp_ms_deltas = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_timestamp_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes packet_number_deltas = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_packet_number_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes acked_packet_number_deltas = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_acked_packet_number_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes receive_acked_packet_time_ms_deltas = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_receive_acked_packet_time_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenericAckReceived::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.GenericAckReceived)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 packet_number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_packet_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &packet_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 acked_packet_number = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_acked_packet_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &acked_packet_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 receive_acked_packet_time_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_receive_acked_packet_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &receive_acked_packet_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_number_of_deltas(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes packet_number_deltas = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes acked_packet_number_deltas = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_acked_packet_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes receive_acked_packet_time_ms_deltas = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_receive_acked_packet_time_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.GenericAckReceived)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.GenericAckReceived)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenericAckReceived::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.GenericAckReceived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional int64 packet_number = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->packet_number(), output);
  }

  // optional int64 acked_packet_number = 3;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->acked_packet_number(), output);
  }

  // optional int64 receive_acked_packet_time_ms = 4;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->receive_acked_packet_time_ms(), output);
  }

  // optional uint32 number_of_deltas = 16;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(16, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 17;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->timestamp_ms_deltas(), output);
  }

  // optional bytes packet_number_deltas = 18;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->packet_number_deltas(), output);
  }

  // optional bytes acked_packet_number_deltas = 19;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->acked_packet_number_deltas(), output);
  }

  // optional bytes receive_acked_packet_time_ms_deltas = 20;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->receive_acked_packet_time_ms_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.GenericAckReceived)
}

size_t GenericAckReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.GenericAckReceived)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes timestamp_ms_deltas = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes packet_number_deltas = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->packet_number_deltas());
    }

    // optional bytes acked_packet_number_deltas = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->acked_packet_number_deltas());
    }

    // optional bytes receive_acked_packet_time_ms_deltas = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->receive_acked_packet_time_ms_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional int64 packet_number = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->packet_number());
    }

    // optional int64 acked_packet_number = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->acked_packet_number());
    }

    // optional int64 receive_acked_packet_time_ms = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->receive_acked_packet_time_ms());
    }

  }
  // optional uint32 number_of_deltas = 16;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->number_of_deltas());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericAckReceived::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GenericAckReceived*>(
      &from));
}

void GenericAckReceived::MergeFrom(const GenericAckReceived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.GenericAckReceived)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      packet_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.packet_number_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      acked_packet_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.acked_packet_number_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      receive_acked_packet_time_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receive_acked_packet_time_ms_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      packet_number_ = from.packet_number_;
    }
    if (cached_has_bits & 0x00000040u) {
      acked_packet_number_ = from.acked_packet_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      receive_acked_packet_time_ms_ = from.receive_acked_packet_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_number_of_deltas(from.number_of_deltas());
  }
}

void GenericAckReceived::CopyFrom(const GenericAckReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.GenericAckReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericAckReceived::IsInitialized() const {
  return true;
}

void GenericAckReceived::InternalSwap(GenericAckReceived* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  packet_number_deltas_.Swap(&other->packet_number_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  acked_packet_number_deltas_.Swap(&other->acked_packet_number_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  receive_acked_packet_time_ms_deltas_.Swap(&other->receive_acked_packet_time_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(packet_number_, other->packet_number_);
  swap(acked_packet_number_, other->acked_packet_number_);
  swap(receive_acked_packet_time_ms_, other->receive_acked_packet_time_ms_);
  swap(number_of_deltas_, other->number_of_deltas_);
}

std::string GenericAckReceived::GetTypeName() const {
  return "webrtc.rtclog2.GenericAckReceived";
}


// ===================================================================

void IncomingRtpPackets::InitAsDefaultInstance() {
}
class IncomingRtpPackets::_Internal {
 public:
  using HasBits = decltype(std::declval<IncomingRtpPackets>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_payload_type(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_rtp_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_payload_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_header_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_padding_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_transport_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_transmission_time_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_absolute_send_time(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_video_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_audio_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_voice_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_marker_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload_type_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequence_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rtp_timestamp_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ssrc_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_payload_size_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_header_size_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_padding_size_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_transport_sequence_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_transmission_time_offset_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_absolute_send_time_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_video_rotation_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_audio_level_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_voice_activity_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

IncomingRtpPackets::IncomingRtpPackets()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.IncomingRtpPackets)
}
IncomingRtpPackets::IncomingRtpPackets(const IncomingRtpPackets& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  marker_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_marker_deltas()) {
    marker_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.marker_deltas_);
  }
  payload_type_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_type_deltas()) {
    payload_type_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_type_deltas_);
  }
  sequence_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_sequence_number_deltas()) {
    sequence_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequence_number_deltas_);
  }
  rtp_timestamp_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_rtp_timestamp_deltas()) {
    rtp_timestamp_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rtp_timestamp_deltas_);
  }
  ssrc_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_ssrc_deltas()) {
    ssrc_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ssrc_deltas_);
  }
  payload_size_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_size_deltas()) {
    payload_size_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_size_deltas_);
  }
  header_size_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_header_size_deltas()) {
    header_size_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_size_deltas_);
  }
  padding_size_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_padding_size_deltas()) {
    padding_size_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.padding_size_deltas_);
  }
  transport_sequence_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_transport_sequence_number_deltas()) {
    transport_sequence_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transport_sequence_number_deltas_);
  }
  transmission_time_offset_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_transmission_time_offset_deltas()) {
    transmission_time_offset_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transmission_time_offset_deltas_);
  }
  absolute_send_time_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_absolute_send_time_deltas()) {
    absolute_send_time_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.absolute_send_time_deltas_);
  }
  video_rotation_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_rotation_deltas()) {
    video_rotation_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.video_rotation_deltas_);
  }
  audio_level_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_audio_level_deltas()) {
    audio_level_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_level_deltas_);
  }
  voice_activity_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_voice_activity_deltas()) {
    voice_activity_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.voice_activity_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_level_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(audio_level_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.IncomingRtpPackets)
}

void IncomingRtpPackets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IncomingRtpPackets_rtc_5fevent_5flog2_2eproto.base);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_type_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rtp_timestamp_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ssrc_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_size_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_size_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  padding_size_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transport_sequence_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transmission_time_offset_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  absolute_send_time_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  video_rotation_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_level_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voice_activity_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_level_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(audio_level_));
}

IncomingRtpPackets::~IncomingRtpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.IncomingRtpPackets)
  SharedDtor();
}

void IncomingRtpPackets::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_type_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_number_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rtp_timestamp_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ssrc_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_size_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_size_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  padding_size_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transport_sequence_number_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transmission_time_offset_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  absolute_send_time_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  video_rotation_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_level_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voice_activity_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IncomingRtpPackets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncomingRtpPackets& IncomingRtpPackets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncomingRtpPackets_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void IncomingRtpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.IncomingRtpPackets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      marker_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      payload_type_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      rtp_timestamp_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      ssrc_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      payload_size_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      header_size_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      padding_size_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      transport_sequence_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      transmission_time_offset_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      absolute_send_time_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      video_rotation_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00002000u) {
      audio_level_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00004000u) {
      voice_activity_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&payload_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&payload_type_)) + sizeof(number_of_deltas_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&marker_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audio_level_) -
        reinterpret_cast<char*>(&marker_)) + sizeof(audio_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IncomingRtpPackets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool marker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_marker(&has_bits);
          marker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 payload_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_payload_type(&has_bits);
          payload_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 rtp_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_rtp_timestamp(&has_bits);
          rtp_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 ssrc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ssrc(&has_bits);
          ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 payload_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_payload_size(&has_bits);
          payload_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 header_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_header_size(&has_bits);
          header_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 padding_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_padding_size(&has_bits);
          padding_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_deltas = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 transport_sequence_number = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_transport_sequence_number(&has_bits);
          transport_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 transmission_time_offset = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_transmission_time_offset(&has_bits);
          transmission_time_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 absolute_send_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_absolute_send_time(&has_bits);
          absolute_send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 video_rotation = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_video_rotation(&has_bits);
          video_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 audio_level = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_audio_level(&has_bits);
          audio_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool voice_activity = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_voice_activity(&has_bits);
          voice_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_timestamp_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes marker_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_marker_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes payload_type_deltas = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_payload_type_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sequence_number_deltas = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_sequence_number_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes rtp_timestamp_deltas = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_rtp_timestamp_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes ssrc_deltas = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ssrc_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes payload_size_deltas = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_payload_size_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes header_size_deltas = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_header_size_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes padding_size_deltas = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_padding_size_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes transport_sequence_number_deltas = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_transport_sequence_number_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes transmission_time_offset_deltas = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_transmission_time_offset_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes absolute_send_time_deltas = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_absolute_send_time_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes video_rotation_deltas = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_video_rotation_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes audio_level_deltas = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_audio_level_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes voice_activity_deltas = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_voice_activity_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IncomingRtpPackets::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.IncomingRtpPackets)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool marker = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_marker(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &marker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 payload_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_payload_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_number = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_sequence_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtp_timestamp = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_rtp_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtp_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 ssrc = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_ssrc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 payload_size = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_payload_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 header_size = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_header_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &header_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 padding_size = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_padding_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &padding_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_number_of_deltas(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 transport_sequence_number = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_transport_sequence_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transport_sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transmission_time_offset = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_transmission_time_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmission_time_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 absolute_send_time = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_absolute_send_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &absolute_send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 video_rotation = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_video_rotation(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 audio_level = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_audio_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool voice_activity = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_voice_activity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voice_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes marker_deltas = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marker_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload_type_deltas = 103;
      case 103: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_type_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sequence_number_deltas = 104;
      case 104: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (834 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sequence_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rtp_timestamp_deltas = 105;
      case 105: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (842 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rtp_timestamp_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ssrc_deltas = 106;
      case 106: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (850 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ssrc_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload_size_deltas = 108;
      case 108: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (866 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_size_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes header_size_deltas = 109;
      case 109: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (874 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header_size_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes padding_size_deltas = 110;
      case 110: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (882 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_padding_size_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transport_sequence_number_deltas = 115;
      case 115: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (922 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transport_sequence_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transmission_time_offset_deltas = 116;
      case 116: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (930 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmission_time_offset_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes absolute_send_time_deltas = 117;
      case 117: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (938 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_absolute_send_time_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes video_rotation_deltas = 118;
      case 118: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (946 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_video_rotation_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes audio_level_deltas = 119;
      case 119: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (954 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio_level_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes voice_activity_deltas = 120;
      case 120: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (962 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice_activity_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.IncomingRtpPackets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.IncomingRtpPackets)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IncomingRtpPackets::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.IncomingRtpPackets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bool marker = 2;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->marker(), output);
  }

  // optional uint32 payload_type = 3;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->payload_type(), output);
  }

  // optional uint32 sequence_number = 4;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->sequence_number(), output);
  }

  // optional fixed32 rtp_timestamp = 5;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(5, this->rtp_timestamp(), output);
  }

  // optional fixed32 ssrc = 6;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(6, this->ssrc(), output);
  }

  // optional uint32 payload_size = 8;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->payload_size(), output);
  }

  // optional uint32 header_size = 9;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->header_size(), output);
  }

  // optional uint32 padding_size = 10;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->padding_size(), output);
  }

  // optional uint32 number_of_deltas = 11;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->number_of_deltas(), output);
  }

  // optional uint32 transport_sequence_number = 15;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(15, this->transport_sequence_number(), output);
  }

  // optional int32 transmission_time_offset = 16;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->transmission_time_offset(), output);
  }

  // optional uint32 absolute_send_time = 17;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(17, this->absolute_send_time(), output);
  }

  // optional uint32 video_rotation = 18;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(18, this->video_rotation(), output);
  }

  // optional uint32 audio_level = 19;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(19, this->audio_level(), output);
  }

  // optional bool voice_activity = 20;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(20, this->voice_activity(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes marker_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->marker_deltas(), output);
  }

  // optional bytes payload_type_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->payload_type_deltas(), output);
  }

  // optional bytes sequence_number_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      104, this->sequence_number_deltas(), output);
  }

  // optional bytes rtp_timestamp_deltas = 105;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      105, this->rtp_timestamp_deltas(), output);
  }

  // optional bytes ssrc_deltas = 106;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      106, this->ssrc_deltas(), output);
  }

  // optional bytes payload_size_deltas = 108;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      108, this->payload_size_deltas(), output);
  }

  // optional bytes header_size_deltas = 109;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      109, this->header_size_deltas(), output);
  }

  // optional bytes padding_size_deltas = 110;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      110, this->padding_size_deltas(), output);
  }

  // optional bytes transport_sequence_number_deltas = 115;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      115, this->transport_sequence_number_deltas(), output);
  }

  // optional bytes transmission_time_offset_deltas = 116;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      116, this->transmission_time_offset_deltas(), output);
  }

  // optional bytes absolute_send_time_deltas = 117;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      117, this->absolute_send_time_deltas(), output);
  }

  // optional bytes video_rotation_deltas = 118;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      118, this->video_rotation_deltas(), output);
  }

  // optional bytes audio_level_deltas = 119;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      119, this->audio_level_deltas(), output);
  }

  // optional bytes voice_activity_deltas = 120;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      120, this->voice_activity_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.IncomingRtpPackets)
}

size_t IncomingRtpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.IncomingRtpPackets)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes marker_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->marker_deltas());
    }

    // optional bytes payload_type_deltas = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->payload_type_deltas());
    }

    // optional bytes sequence_number_deltas = 104;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->sequence_number_deltas());
    }

    // optional bytes rtp_timestamp_deltas = 105;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->rtp_timestamp_deltas());
    }

    // optional bytes ssrc_deltas = 106;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->ssrc_deltas());
    }

    // optional bytes payload_size_deltas = 108;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->payload_size_deltas());
    }

    // optional bytes header_size_deltas = 109;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->header_size_deltas());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bytes padding_size_deltas = 110;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->padding_size_deltas());
    }

    // optional bytes transport_sequence_number_deltas = 115;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->transport_sequence_number_deltas());
    }

    // optional bytes transmission_time_offset_deltas = 116;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->transmission_time_offset_deltas());
    }

    // optional bytes absolute_send_time_deltas = 117;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->absolute_send_time_deltas());
    }

    // optional bytes video_rotation_deltas = 118;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->video_rotation_deltas());
    }

    // optional bytes audio_level_deltas = 119;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->audio_level_deltas());
    }

    // optional bytes voice_activity_deltas = 120;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->voice_activity_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 payload_type = 3;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->payload_type());
    }

    // optional uint32 sequence_number = 4;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->sequence_number());
    }

    // optional fixed32 rtp_timestamp = 5;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional fixed32 ssrc = 6;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional uint32 payload_size = 8;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->payload_size());
    }

    // optional uint32 header_size = 9;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->header_size());
    }

    // optional uint32 padding_size = 10;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->padding_size());
    }

    // optional uint32 number_of_deltas = 11;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional bool marker = 2;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 1;
    }

    // optional bool voice_activity = 20;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 transport_sequence_number = 15;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->transport_sequence_number());
    }

    // optional int32 transmission_time_offset = 16;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->transmission_time_offset());
    }

    // optional uint32 absolute_send_time = 17;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->absolute_send_time());
    }

    // optional uint32 video_rotation = 18;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->video_rotation());
    }

    // optional uint32 audio_level = 19;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->audio_level());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncomingRtpPackets::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IncomingRtpPackets*>(
      &from));
}

void IncomingRtpPackets::MergeFrom(const IncomingRtpPackets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.IncomingRtpPackets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      marker_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.marker_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      payload_type_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_type_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      sequence_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequence_number_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      rtp_timestamp_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rtp_timestamp_deltas_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      ssrc_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ssrc_deltas_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      payload_size_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_size_deltas_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      header_size_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_size_deltas_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      padding_size_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.padding_size_deltas_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      transport_sequence_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transport_sequence_number_deltas_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      transmission_time_offset_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transmission_time_offset_deltas_);
    }
    if (cached_has_bits & 0x00000800u) {
      _has_bits_[0] |= 0x00000800u;
      absolute_send_time_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.absolute_send_time_deltas_);
    }
    if (cached_has_bits & 0x00001000u) {
      _has_bits_[0] |= 0x00001000u;
      video_rotation_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.video_rotation_deltas_);
    }
    if (cached_has_bits & 0x00002000u) {
      _has_bits_[0] |= 0x00002000u;
      audio_level_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_level_deltas_);
    }
    if (cached_has_bits & 0x00004000u) {
      _has_bits_[0] |= 0x00004000u;
      voice_activity_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.voice_activity_deltas_);
    }
    if (cached_has_bits & 0x00008000u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      payload_type_ = from.payload_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      sequence_number_ = from.sequence_number_;
    }
    if (cached_has_bits & 0x00040000u) {
      rtp_timestamp_ = from.rtp_timestamp_;
    }
    if (cached_has_bits & 0x00080000u) {
      ssrc_ = from.ssrc_;
    }
    if (cached_has_bits & 0x00100000u) {
      payload_size_ = from.payload_size_;
    }
    if (cached_has_bits & 0x00200000u) {
      header_size_ = from.header_size_;
    }
    if (cached_has_bits & 0x00400000u) {
      padding_size_ = from.padding_size_;
    }
    if (cached_has_bits & 0x00800000u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      marker_ = from.marker_;
    }
    if (cached_has_bits & 0x02000000u) {
      voice_activity_ = from.voice_activity_;
    }
    if (cached_has_bits & 0x04000000u) {
      transport_sequence_number_ = from.transport_sequence_number_;
    }
    if (cached_has_bits & 0x08000000u) {
      transmission_time_offset_ = from.transmission_time_offset_;
    }
    if (cached_has_bits & 0x10000000u) {
      absolute_send_time_ = from.absolute_send_time_;
    }
    if (cached_has_bits & 0x20000000u) {
      video_rotation_ = from.video_rotation_;
    }
    if (cached_has_bits & 0x40000000u) {
      audio_level_ = from.audio_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IncomingRtpPackets::CopyFrom(const IncomingRtpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.IncomingRtpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomingRtpPackets::IsInitialized() const {
  return true;
}

void IncomingRtpPackets::InternalSwap(IncomingRtpPackets* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marker_deltas_.Swap(&other->marker_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_type_deltas_.Swap(&other->payload_type_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sequence_number_deltas_.Swap(&other->sequence_number_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rtp_timestamp_deltas_.Swap(&other->rtp_timestamp_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ssrc_deltas_.Swap(&other->ssrc_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_size_deltas_.Swap(&other->payload_size_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  header_size_deltas_.Swap(&other->header_size_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  padding_size_deltas_.Swap(&other->padding_size_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transport_sequence_number_deltas_.Swap(&other->transport_sequence_number_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transmission_time_offset_deltas_.Swap(&other->transmission_time_offset_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  absolute_send_time_deltas_.Swap(&other->absolute_send_time_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  video_rotation_deltas_.Swap(&other->video_rotation_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  audio_level_deltas_.Swap(&other->audio_level_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  voice_activity_deltas_.Swap(&other->voice_activity_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(payload_type_, other->payload_type_);
  swap(sequence_number_, other->sequence_number_);
  swap(rtp_timestamp_, other->rtp_timestamp_);
  swap(ssrc_, other->ssrc_);
  swap(payload_size_, other->payload_size_);
  swap(header_size_, other->header_size_);
  swap(padding_size_, other->padding_size_);
  swap(number_of_deltas_, other->number_of_deltas_);
  swap(marker_, other->marker_);
  swap(voice_activity_, other->voice_activity_);
  swap(transport_sequence_number_, other->transport_sequence_number_);
  swap(transmission_time_offset_, other->transmission_time_offset_);
  swap(absolute_send_time_, other->absolute_send_time_);
  swap(video_rotation_, other->video_rotation_);
  swap(audio_level_, other->audio_level_);
}

std::string IncomingRtpPackets::GetTypeName() const {
  return "webrtc.rtclog2.IncomingRtpPackets";
}


// ===================================================================

void OutgoingRtpPackets::InitAsDefaultInstance() {
}
class OutgoingRtpPackets::_Internal {
 public:
  using HasBits = decltype(std::declval<OutgoingRtpPackets>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_payload_type(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_rtp_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_payload_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_header_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_padding_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_transport_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_transmission_time_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_absolute_send_time(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_video_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_audio_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_voice_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_marker_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload_type_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequence_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rtp_timestamp_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ssrc_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_payload_size_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_header_size_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_padding_size_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_transport_sequence_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_transmission_time_offset_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_absolute_send_time_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_video_rotation_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_audio_level_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_voice_activity_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

OutgoingRtpPackets::OutgoingRtpPackets()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.OutgoingRtpPackets)
}
OutgoingRtpPackets::OutgoingRtpPackets(const OutgoingRtpPackets& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  marker_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_marker_deltas()) {
    marker_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.marker_deltas_);
  }
  payload_type_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_type_deltas()) {
    payload_type_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_type_deltas_);
  }
  sequence_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_sequence_number_deltas()) {
    sequence_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequence_number_deltas_);
  }
  rtp_timestamp_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_rtp_timestamp_deltas()) {
    rtp_timestamp_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rtp_timestamp_deltas_);
  }
  ssrc_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_ssrc_deltas()) {
    ssrc_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ssrc_deltas_);
  }
  payload_size_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_size_deltas()) {
    payload_size_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_size_deltas_);
  }
  header_size_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_header_size_deltas()) {
    header_size_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_size_deltas_);
  }
  padding_size_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_padding_size_deltas()) {
    padding_size_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.padding_size_deltas_);
  }
  transport_sequence_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_transport_sequence_number_deltas()) {
    transport_sequence_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transport_sequence_number_deltas_);
  }
  transmission_time_offset_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_transmission_time_offset_deltas()) {
    transmission_time_offset_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transmission_time_offset_deltas_);
  }
  absolute_send_time_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_absolute_send_time_deltas()) {
    absolute_send_time_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.absolute_send_time_deltas_);
  }
  video_rotation_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_rotation_deltas()) {
    video_rotation_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.video_rotation_deltas_);
  }
  audio_level_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_audio_level_deltas()) {
    audio_level_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_level_deltas_);
  }
  voice_activity_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_voice_activity_deltas()) {
    voice_activity_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.voice_activity_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_level_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(audio_level_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.OutgoingRtpPackets)
}

void OutgoingRtpPackets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutgoingRtpPackets_rtc_5fevent_5flog2_2eproto.base);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_type_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rtp_timestamp_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ssrc_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_size_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_size_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  padding_size_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transport_sequence_number_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transmission_time_offset_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  absolute_send_time_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  video_rotation_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_level_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voice_activity_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_level_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(audio_level_));
}

OutgoingRtpPackets::~OutgoingRtpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.OutgoingRtpPackets)
  SharedDtor();
}

void OutgoingRtpPackets::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_type_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_number_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rtp_timestamp_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ssrc_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_size_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_size_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  padding_size_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transport_sequence_number_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transmission_time_offset_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  absolute_send_time_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  video_rotation_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_level_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voice_activity_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutgoingRtpPackets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutgoingRtpPackets& OutgoingRtpPackets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutgoingRtpPackets_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void OutgoingRtpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.OutgoingRtpPackets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      marker_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      payload_type_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      rtp_timestamp_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      ssrc_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      payload_size_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      header_size_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      padding_size_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      transport_sequence_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      transmission_time_offset_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      absolute_send_time_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      video_rotation_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00002000u) {
      audio_level_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00004000u) {
      voice_activity_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&payload_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&payload_type_)) + sizeof(number_of_deltas_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&marker_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audio_level_) -
        reinterpret_cast<char*>(&marker_)) + sizeof(audio_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OutgoingRtpPackets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool marker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_marker(&has_bits);
          marker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 payload_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_payload_type(&has_bits);
          payload_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 rtp_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_rtp_timestamp(&has_bits);
          rtp_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 ssrc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ssrc(&has_bits);
          ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 payload_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_payload_size(&has_bits);
          payload_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 header_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_header_size(&has_bits);
          header_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 padding_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_padding_size(&has_bits);
          padding_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_deltas = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 transport_sequence_number = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_transport_sequence_number(&has_bits);
          transport_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 transmission_time_offset = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_transmission_time_offset(&has_bits);
          transmission_time_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 absolute_send_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_absolute_send_time(&has_bits);
          absolute_send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 video_rotation = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_video_rotation(&has_bits);
          video_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 audio_level = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_audio_level(&has_bits);
          audio_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool voice_activity = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_voice_activity(&has_bits);
          voice_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_timestamp_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes marker_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_marker_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes payload_type_deltas = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_payload_type_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sequence_number_deltas = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_sequence_number_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes rtp_timestamp_deltas = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_rtp_timestamp_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes ssrc_deltas = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ssrc_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes payload_size_deltas = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_payload_size_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes header_size_deltas = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_header_size_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes padding_size_deltas = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_padding_size_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes transport_sequence_number_deltas = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_transport_sequence_number_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes transmission_time_offset_deltas = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_transmission_time_offset_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes absolute_send_time_deltas = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_absolute_send_time_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes video_rotation_deltas = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_video_rotation_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes audio_level_deltas = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_audio_level_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes voice_activity_deltas = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_voice_activity_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OutgoingRtpPackets::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.OutgoingRtpPackets)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool marker = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_marker(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &marker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 payload_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_payload_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_number = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_sequence_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtp_timestamp = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_rtp_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtp_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 ssrc = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_ssrc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 payload_size = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_payload_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 header_size = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_header_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &header_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 padding_size = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_padding_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &padding_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_number_of_deltas(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 transport_sequence_number = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_transport_sequence_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transport_sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transmission_time_offset = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_transmission_time_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmission_time_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 absolute_send_time = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_absolute_send_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &absolute_send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 video_rotation = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_video_rotation(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 audio_level = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_audio_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool voice_activity = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_voice_activity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voice_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes marker_deltas = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marker_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload_type_deltas = 103;
      case 103: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_type_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sequence_number_deltas = 104;
      case 104: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (834 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sequence_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rtp_timestamp_deltas = 105;
      case 105: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (842 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rtp_timestamp_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ssrc_deltas = 106;
      case 106: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (850 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ssrc_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload_size_deltas = 108;
      case 108: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (866 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_size_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes header_size_deltas = 109;
      case 109: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (874 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header_size_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes padding_size_deltas = 110;
      case 110: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (882 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_padding_size_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transport_sequence_number_deltas = 115;
      case 115: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (922 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transport_sequence_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transmission_time_offset_deltas = 116;
      case 116: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (930 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmission_time_offset_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes absolute_send_time_deltas = 117;
      case 117: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (938 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_absolute_send_time_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes video_rotation_deltas = 118;
      case 118: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (946 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_video_rotation_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes audio_level_deltas = 119;
      case 119: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (954 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio_level_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes voice_activity_deltas = 120;
      case 120: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (962 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice_activity_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.OutgoingRtpPackets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.OutgoingRtpPackets)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OutgoingRtpPackets::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.OutgoingRtpPackets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bool marker = 2;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->marker(), output);
  }

  // optional uint32 payload_type = 3;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->payload_type(), output);
  }

  // optional uint32 sequence_number = 4;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->sequence_number(), output);
  }

  // optional fixed32 rtp_timestamp = 5;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(5, this->rtp_timestamp(), output);
  }

  // optional fixed32 ssrc = 6;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(6, this->ssrc(), output);
  }

  // optional uint32 payload_size = 8;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->payload_size(), output);
  }

  // optional uint32 header_size = 9;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->header_size(), output);
  }

  // optional uint32 padding_size = 10;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->padding_size(), output);
  }

  // optional uint32 number_of_deltas = 11;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->number_of_deltas(), output);
  }

  // optional uint32 transport_sequence_number = 15;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(15, this->transport_sequence_number(), output);
  }

  // optional int32 transmission_time_offset = 16;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->transmission_time_offset(), output);
  }

  // optional uint32 absolute_send_time = 17;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(17, this->absolute_send_time(), output);
  }

  // optional uint32 video_rotation = 18;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(18, this->video_rotation(), output);
  }

  // optional uint32 audio_level = 19;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(19, this->audio_level(), output);
  }

  // optional bool voice_activity = 20;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(20, this->voice_activity(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes marker_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->marker_deltas(), output);
  }

  // optional bytes payload_type_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->payload_type_deltas(), output);
  }

  // optional bytes sequence_number_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      104, this->sequence_number_deltas(), output);
  }

  // optional bytes rtp_timestamp_deltas = 105;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      105, this->rtp_timestamp_deltas(), output);
  }

  // optional bytes ssrc_deltas = 106;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      106, this->ssrc_deltas(), output);
  }

  // optional bytes payload_size_deltas = 108;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      108, this->payload_size_deltas(), output);
  }

  // optional bytes header_size_deltas = 109;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      109, this->header_size_deltas(), output);
  }

  // optional bytes padding_size_deltas = 110;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      110, this->padding_size_deltas(), output);
  }

  // optional bytes transport_sequence_number_deltas = 115;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      115, this->transport_sequence_number_deltas(), output);
  }

  // optional bytes transmission_time_offset_deltas = 116;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      116, this->transmission_time_offset_deltas(), output);
  }

  // optional bytes absolute_send_time_deltas = 117;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      117, this->absolute_send_time_deltas(), output);
  }

  // optional bytes video_rotation_deltas = 118;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      118, this->video_rotation_deltas(), output);
  }

  // optional bytes audio_level_deltas = 119;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      119, this->audio_level_deltas(), output);
  }

  // optional bytes voice_activity_deltas = 120;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      120, this->voice_activity_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.OutgoingRtpPackets)
}

size_t OutgoingRtpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.OutgoingRtpPackets)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes marker_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->marker_deltas());
    }

    // optional bytes payload_type_deltas = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->payload_type_deltas());
    }

    // optional bytes sequence_number_deltas = 104;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->sequence_number_deltas());
    }

    // optional bytes rtp_timestamp_deltas = 105;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->rtp_timestamp_deltas());
    }

    // optional bytes ssrc_deltas = 106;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->ssrc_deltas());
    }

    // optional bytes payload_size_deltas = 108;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->payload_size_deltas());
    }

    // optional bytes header_size_deltas = 109;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->header_size_deltas());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bytes padding_size_deltas = 110;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->padding_size_deltas());
    }

    // optional bytes transport_sequence_number_deltas = 115;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->transport_sequence_number_deltas());
    }

    // optional bytes transmission_time_offset_deltas = 116;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->transmission_time_offset_deltas());
    }

    // optional bytes absolute_send_time_deltas = 117;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->absolute_send_time_deltas());
    }

    // optional bytes video_rotation_deltas = 118;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->video_rotation_deltas());
    }

    // optional bytes audio_level_deltas = 119;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->audio_level_deltas());
    }

    // optional bytes voice_activity_deltas = 120;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->voice_activity_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 payload_type = 3;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->payload_type());
    }

    // optional uint32 sequence_number = 4;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->sequence_number());
    }

    // optional fixed32 rtp_timestamp = 5;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional fixed32 ssrc = 6;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional uint32 payload_size = 8;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->payload_size());
    }

    // optional uint32 header_size = 9;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->header_size());
    }

    // optional uint32 padding_size = 10;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->padding_size());
    }

    // optional uint32 number_of_deltas = 11;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional bool marker = 2;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 1;
    }

    // optional bool voice_activity = 20;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 transport_sequence_number = 15;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->transport_sequence_number());
    }

    // optional int32 transmission_time_offset = 16;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->transmission_time_offset());
    }

    // optional uint32 absolute_send_time = 17;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->absolute_send_time());
    }

    // optional uint32 video_rotation = 18;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->video_rotation());
    }

    // optional uint32 audio_level = 19;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->audio_level());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutgoingRtpPackets::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OutgoingRtpPackets*>(
      &from));
}

void OutgoingRtpPackets::MergeFrom(const OutgoingRtpPackets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.OutgoingRtpPackets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      marker_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.marker_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      payload_type_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_type_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      sequence_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequence_number_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      rtp_timestamp_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rtp_timestamp_deltas_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      ssrc_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ssrc_deltas_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      payload_size_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_size_deltas_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      header_size_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_size_deltas_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      padding_size_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.padding_size_deltas_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      transport_sequence_number_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transport_sequence_number_deltas_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      transmission_time_offset_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transmission_time_offset_deltas_);
    }
    if (cached_has_bits & 0x00000800u) {
      _has_bits_[0] |= 0x00000800u;
      absolute_send_time_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.absolute_send_time_deltas_);
    }
    if (cached_has_bits & 0x00001000u) {
      _has_bits_[0] |= 0x00001000u;
      video_rotation_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.video_rotation_deltas_);
    }
    if (cached_has_bits & 0x00002000u) {
      _has_bits_[0] |= 0x00002000u;
      audio_level_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_level_deltas_);
    }
    if (cached_has_bits & 0x00004000u) {
      _has_bits_[0] |= 0x00004000u;
      voice_activity_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.voice_activity_deltas_);
    }
    if (cached_has_bits & 0x00008000u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      payload_type_ = from.payload_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      sequence_number_ = from.sequence_number_;
    }
    if (cached_has_bits & 0x00040000u) {
      rtp_timestamp_ = from.rtp_timestamp_;
    }
    if (cached_has_bits & 0x00080000u) {
      ssrc_ = from.ssrc_;
    }
    if (cached_has_bits & 0x00100000u) {
      payload_size_ = from.payload_size_;
    }
    if (cached_has_bits & 0x00200000u) {
      header_size_ = from.header_size_;
    }
    if (cached_has_bits & 0x00400000u) {
      padding_size_ = from.padding_size_;
    }
    if (cached_has_bits & 0x00800000u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      marker_ = from.marker_;
    }
    if (cached_has_bits & 0x02000000u) {
      voice_activity_ = from.voice_activity_;
    }
    if (cached_has_bits & 0x04000000u) {
      transport_sequence_number_ = from.transport_sequence_number_;
    }
    if (cached_has_bits & 0x08000000u) {
      transmission_time_offset_ = from.transmission_time_offset_;
    }
    if (cached_has_bits & 0x10000000u) {
      absolute_send_time_ = from.absolute_send_time_;
    }
    if (cached_has_bits & 0x20000000u) {
      video_rotation_ = from.video_rotation_;
    }
    if (cached_has_bits & 0x40000000u) {
      audio_level_ = from.audio_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OutgoingRtpPackets::CopyFrom(const OutgoingRtpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.OutgoingRtpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingRtpPackets::IsInitialized() const {
  return true;
}

void OutgoingRtpPackets::InternalSwap(OutgoingRtpPackets* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marker_deltas_.Swap(&other->marker_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_type_deltas_.Swap(&other->payload_type_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sequence_number_deltas_.Swap(&other->sequence_number_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rtp_timestamp_deltas_.Swap(&other->rtp_timestamp_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ssrc_deltas_.Swap(&other->ssrc_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_size_deltas_.Swap(&other->payload_size_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  header_size_deltas_.Swap(&other->header_size_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  padding_size_deltas_.Swap(&other->padding_size_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transport_sequence_number_deltas_.Swap(&other->transport_sequence_number_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transmission_time_offset_deltas_.Swap(&other->transmission_time_offset_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  absolute_send_time_deltas_.Swap(&other->absolute_send_time_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  video_rotation_deltas_.Swap(&other->video_rotation_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  audio_level_deltas_.Swap(&other->audio_level_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  voice_activity_deltas_.Swap(&other->voice_activity_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(payload_type_, other->payload_type_);
  swap(sequence_number_, other->sequence_number_);
  swap(rtp_timestamp_, other->rtp_timestamp_);
  swap(ssrc_, other->ssrc_);
  swap(payload_size_, other->payload_size_);
  swap(header_size_, other->header_size_);
  swap(padding_size_, other->padding_size_);
  swap(number_of_deltas_, other->number_of_deltas_);
  swap(marker_, other->marker_);
  swap(voice_activity_, other->voice_activity_);
  swap(transport_sequence_number_, other->transport_sequence_number_);
  swap(transmission_time_offset_, other->transmission_time_offset_);
  swap(absolute_send_time_, other->absolute_send_time_);
  swap(video_rotation_, other->video_rotation_);
  swap(audio_level_, other->audio_level_);
}

std::string OutgoingRtpPackets::GetTypeName() const {
  return "webrtc.rtclog2.OutgoingRtpPackets";
}


// ===================================================================

void IncomingRtcpPackets::InitAsDefaultInstance() {
}
class IncomingRtcpPackets::_Internal {
 public:
  using HasBits = decltype(std::declval<IncomingRtcpPackets>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_raw_packet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_raw_packet_blobs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

IncomingRtcpPackets::IncomingRtcpPackets()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.IncomingRtcpPackets)
}
IncomingRtcpPackets::IncomingRtcpPackets(const IncomingRtcpPackets& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_packet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_packet()) {
    raw_packet_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_packet_);
  }
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  raw_packet_blobs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_packet_blobs()) {
    raw_packet_blobs_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_packet_blobs_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.IncomingRtcpPackets)
}

void IncomingRtcpPackets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IncomingRtcpPackets_rtc_5fevent_5flog2_2eproto.base);
  raw_packet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_packet_blobs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

IncomingRtcpPackets::~IncomingRtcpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.IncomingRtcpPackets)
  SharedDtor();
}

void IncomingRtcpPackets::SharedDtor() {
  raw_packet_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_packet_blobs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IncomingRtcpPackets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncomingRtcpPackets& IncomingRtcpPackets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncomingRtcpPackets_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void IncomingRtcpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.IncomingRtcpPackets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      raw_packet_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      raw_packet_blobs_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IncomingRtcpPackets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes raw_packet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_raw_packet(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_deltas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_timestamp_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes raw_packet_blobs = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_raw_packet_blobs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IncomingRtcpPackets::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.IncomingRtcpPackets)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes raw_packet = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_number_of_deltas(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes raw_packet_blobs = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_packet_blobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.IncomingRtcpPackets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.IncomingRtcpPackets)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IncomingRtcpPackets::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.IncomingRtcpPackets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bytes raw_packet = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->raw_packet(), output);
  }

  // optional uint32 number_of_deltas = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes raw_packet_blobs = 102;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->raw_packet_blobs(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.IncomingRtcpPackets)
}

size_t IncomingRtcpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.IncomingRtcpPackets)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes raw_packet = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->raw_packet());
    }

    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes raw_packet_blobs = 102;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->raw_packet_blobs());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 number_of_deltas = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncomingRtcpPackets::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IncomingRtcpPackets*>(
      &from));
}

void IncomingRtcpPackets::MergeFrom(const IncomingRtcpPackets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.IncomingRtcpPackets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      raw_packet_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_packet_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      raw_packet_blobs_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_packet_blobs_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IncomingRtcpPackets::CopyFrom(const IncomingRtcpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.IncomingRtcpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomingRtcpPackets::IsInitialized() const {
  return true;
}

void IncomingRtcpPackets::InternalSwap(IncomingRtcpPackets* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  raw_packet_.Swap(&other->raw_packet_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_packet_blobs_.Swap(&other->raw_packet_blobs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(number_of_deltas_, other->number_of_deltas_);
}

std::string IncomingRtcpPackets::GetTypeName() const {
  return "webrtc.rtclog2.IncomingRtcpPackets";
}


// ===================================================================

void OutgoingRtcpPackets::InitAsDefaultInstance() {
}
class OutgoingRtcpPackets::_Internal {
 public:
  using HasBits = decltype(std::declval<OutgoingRtcpPackets>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_raw_packet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_raw_packet_blobs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

OutgoingRtcpPackets::OutgoingRtcpPackets()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.OutgoingRtcpPackets)
}
OutgoingRtcpPackets::OutgoingRtcpPackets(const OutgoingRtcpPackets& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_packet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_packet()) {
    raw_packet_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_packet_);
  }
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  raw_packet_blobs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_packet_blobs()) {
    raw_packet_blobs_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_packet_blobs_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.OutgoingRtcpPackets)
}

void OutgoingRtcpPackets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutgoingRtcpPackets_rtc_5fevent_5flog2_2eproto.base);
  raw_packet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_packet_blobs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

OutgoingRtcpPackets::~OutgoingRtcpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.OutgoingRtcpPackets)
  SharedDtor();
}

void OutgoingRtcpPackets::SharedDtor() {
  raw_packet_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_packet_blobs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutgoingRtcpPackets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutgoingRtcpPackets& OutgoingRtcpPackets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutgoingRtcpPackets_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void OutgoingRtcpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.OutgoingRtcpPackets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      raw_packet_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      raw_packet_blobs_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OutgoingRtcpPackets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes raw_packet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_raw_packet(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_deltas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_timestamp_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes raw_packet_blobs = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_raw_packet_blobs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OutgoingRtcpPackets::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.OutgoingRtcpPackets)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes raw_packet = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_number_of_deltas(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes raw_packet_blobs = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_packet_blobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.OutgoingRtcpPackets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.OutgoingRtcpPackets)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OutgoingRtcpPackets::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.OutgoingRtcpPackets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bytes raw_packet = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->raw_packet(), output);
  }

  // optional uint32 number_of_deltas = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes raw_packet_blobs = 102;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->raw_packet_blobs(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.OutgoingRtcpPackets)
}

size_t OutgoingRtcpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.OutgoingRtcpPackets)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes raw_packet = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->raw_packet());
    }

    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes raw_packet_blobs = 102;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->raw_packet_blobs());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 number_of_deltas = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutgoingRtcpPackets::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OutgoingRtcpPackets*>(
      &from));
}

void OutgoingRtcpPackets::MergeFrom(const OutgoingRtcpPackets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.OutgoingRtcpPackets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      raw_packet_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_packet_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      raw_packet_blobs_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_packet_blobs_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OutgoingRtcpPackets::CopyFrom(const OutgoingRtcpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.OutgoingRtcpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingRtcpPackets::IsInitialized() const {
  return true;
}

void OutgoingRtcpPackets::InternalSwap(OutgoingRtcpPackets* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  raw_packet_.Swap(&other->raw_packet_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_packet_blobs_.Swap(&other->raw_packet_blobs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(number_of_deltas_, other->number_of_deltas_);
}

std::string OutgoingRtcpPackets::GetTypeName() const {
  return "webrtc.rtclog2.OutgoingRtcpPackets";
}


// ===================================================================

void AudioPlayoutEvents::InitAsDefaultInstance() {
}
class AudioPlayoutEvents::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioPlayoutEvents>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_local_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_local_ssrc_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AudioPlayoutEvents::AudioPlayoutEvents()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.AudioPlayoutEvents)
}
AudioPlayoutEvents::AudioPlayoutEvents(const AudioPlayoutEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  local_ssrc_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_local_ssrc_deltas()) {
    local_ssrc_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_ssrc_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioPlayoutEvents)
}

void AudioPlayoutEvents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioPlayoutEvents_rtc_5fevent_5flog2_2eproto.base);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_ssrc_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

AudioPlayoutEvents::~AudioPlayoutEvents() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioPlayoutEvents)
  SharedDtor();
}

void AudioPlayoutEvents::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_ssrc_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioPlayoutEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioPlayoutEvents& AudioPlayoutEvents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioPlayoutEvents_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void AudioPlayoutEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioPlayoutEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      local_ssrc_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AudioPlayoutEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 local_ssrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_local_ssrc(&has_bits);
          local_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_deltas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_timestamp_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes local_ssrc_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_local_ssrc_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AudioPlayoutEvents::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.AudioPlayoutEvents)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_ssrc = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_local_ssrc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_number_of_deltas(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes local_ssrc_deltas = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_local_ssrc_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.AudioPlayoutEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.AudioPlayoutEvents)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AudioPlayoutEvents::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.AudioPlayoutEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 local_ssrc = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->local_ssrc(), output);
  }

  // optional uint32 number_of_deltas = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes local_ssrc_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->local_ssrc_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.AudioPlayoutEvents)
}

size_t AudioPlayoutEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioPlayoutEvents)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes local_ssrc_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->local_ssrc_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 local_ssrc = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->local_ssrc());
    }

    // optional uint32 number_of_deltas = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioPlayoutEvents::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AudioPlayoutEvents*>(
      &from));
}

void AudioPlayoutEvents::MergeFrom(const AudioPlayoutEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioPlayoutEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      local_ssrc_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_ssrc_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      local_ssrc_ = from.local_ssrc_;
    }
    if (cached_has_bits & 0x00000010u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioPlayoutEvents::CopyFrom(const AudioPlayoutEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioPlayoutEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioPlayoutEvents::IsInitialized() const {
  return true;
}

void AudioPlayoutEvents::InternalSwap(AudioPlayoutEvents* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_ssrc_deltas_.Swap(&other->local_ssrc_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(local_ssrc_, other->local_ssrc_);
  swap(number_of_deltas_, other->number_of_deltas_);
}

std::string AudioPlayoutEvents::GetTypeName() const {
  return "webrtc.rtclog2.AudioPlayoutEvents";
}


// ===================================================================

void FrameDecodedEvents::InitAsDefaultInstance() {
}
class FrameDecodedEvents::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameDecodedEvents>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_render_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_qp(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ssrc_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_render_time_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_codec_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_qp_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

FrameDecodedEvents::FrameDecodedEvents()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.FrameDecodedEvents)
}
FrameDecodedEvents::FrameDecodedEvents(const FrameDecodedEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  ssrc_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_ssrc_deltas()) {
    ssrc_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ssrc_deltas_);
  }
  render_time_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_render_time_ms_deltas()) {
    render_time_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.render_time_ms_deltas_);
  }
  width_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_width_deltas()) {
    width_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.width_deltas_);
  }
  height_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_height_deltas()) {
    height_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.height_deltas_);
  }
  codec_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_codec_deltas()) {
    codec_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.codec_deltas_);
  }
  qp_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_qp_deltas()) {
    qp_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.qp_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.FrameDecodedEvents)
}

void FrameDecodedEvents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameDecodedEvents_rtc_5fevent_5flog2_2eproto.base);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ssrc_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  render_time_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  width_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  height_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codec_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qp_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

FrameDecodedEvents::~FrameDecodedEvents() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.FrameDecodedEvents)
  SharedDtor();
}

void FrameDecodedEvents::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ssrc_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  render_time_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  width_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  height_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codec_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qp_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FrameDecodedEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameDecodedEvents& FrameDecodedEvents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameDecodedEvents_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void FrameDecodedEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.FrameDecodedEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ssrc_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      render_time_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      width_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      height_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      codec_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      qp_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&render_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&render_time_ms_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FrameDecodedEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 ssrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ssrc(&has_bits);
          ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional int64 render_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_render_time_ms(&has_bits);
          render_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.FrameDecodedEvents.Codec codec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::FrameDecodedEvents_Codec_IsValid(val))) {
            set_codec(static_cast<::webrtc::rtclog2::FrameDecodedEvents_Codec>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 qp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_qp(&has_bits);
          qp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_deltas = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_timestamp_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes ssrc_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ssrc_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes render_time_ms_deltas = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_render_time_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes width_deltas = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_width_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes height_deltas = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_height_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes codec_deltas = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_codec_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes qp_deltas = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_qp_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FrameDecodedEvents::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.FrameDecodedEvents)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 ssrc = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_ssrc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 render_time_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_render_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &render_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.FrameDecodedEvents.Codec codec = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::FrameDecodedEvents_Codec_IsValid(value)) {
            set_codec(static_cast< ::webrtc::rtclog2::FrameDecodedEvents_Codec >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 qp = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_qp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_number_of_deltas(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ssrc_deltas = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ssrc_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes render_time_ms_deltas = 103;
      case 103: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_render_time_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes width_deltas = 104;
      case 104: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (834 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_width_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes height_deltas = 105;
      case 105: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (842 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_height_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes codec_deltas = 106;
      case 106: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (850 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_codec_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes qp_deltas = 107;
      case 107: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (858 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qp_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.FrameDecodedEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.FrameDecodedEvents)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FrameDecodedEvents::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.FrameDecodedEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional fixed32 ssrc = 2;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(2, this->ssrc(), output);
  }

  // optional int64 render_time_ms = 3;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->render_time_ms(), output);
  }

  // optional int32 width = 4;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // optional int32 height = 5;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // optional .webrtc.rtclog2.FrameDecodedEvents.Codec codec = 6;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->codec(), output);
  }

  // optional uint32 qp = 7;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->qp(), output);
  }

  // optional uint32 number_of_deltas = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(15, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes ssrc_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->ssrc_deltas(), output);
  }

  // optional bytes render_time_ms_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->render_time_ms_deltas(), output);
  }

  // optional bytes width_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      104, this->width_deltas(), output);
  }

  // optional bytes height_deltas = 105;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      105, this->height_deltas(), output);
  }

  // optional bytes codec_deltas = 106;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      106, this->codec_deltas(), output);
  }

  // optional bytes qp_deltas = 107;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      107, this->qp_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.FrameDecodedEvents)
}

size_t FrameDecodedEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.FrameDecodedEvents)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes ssrc_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->ssrc_deltas());
    }

    // optional bytes render_time_ms_deltas = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->render_time_ms_deltas());
    }

    // optional bytes width_deltas = 104;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->width_deltas());
    }

    // optional bytes height_deltas = 105;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->height_deltas());
    }

    // optional bytes codec_deltas = 106;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->codec_deltas());
    }

    // optional bytes qp_deltas = 107;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->qp_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int64 render_time_ms = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->render_time_ms());
    }

    // optional fixed32 ssrc = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional int32 width = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional .webrtc.rtclog2.FrameDecodedEvents.Codec codec = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->codec());
    }

    // optional uint32 qp = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->qp());
    }

    // optional uint32 number_of_deltas = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameDecodedEvents::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FrameDecodedEvents*>(
      &from));
}

void FrameDecodedEvents::MergeFrom(const FrameDecodedEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.FrameDecodedEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ssrc_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ssrc_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      render_time_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.render_time_ms_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      width_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.width_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      height_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.height_deltas_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      codec_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.codec_deltas_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      qp_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.qp_deltas_);
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      render_time_ms_ = from.render_time_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      ssrc_ = from.ssrc_;
    }
    if (cached_has_bits & 0x00000400u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000800u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00001000u) {
      codec_ = from.codec_;
    }
    if (cached_has_bits & 0x00002000u) {
      qp_ = from.qp_;
    }
    if (cached_has_bits & 0x00004000u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameDecodedEvents::CopyFrom(const FrameDecodedEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.FrameDecodedEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameDecodedEvents::IsInitialized() const {
  return true;
}

void FrameDecodedEvents::InternalSwap(FrameDecodedEvents* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ssrc_deltas_.Swap(&other->ssrc_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  render_time_ms_deltas_.Swap(&other->render_time_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  width_deltas_.Swap(&other->width_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  height_deltas_.Swap(&other->height_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  codec_deltas_.Swap(&other->codec_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  qp_deltas_.Swap(&other->qp_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(render_time_ms_, other->render_time_ms_);
  swap(ssrc_, other->ssrc_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(codec_, other->codec_);
  swap(qp_, other->qp_);
  swap(number_of_deltas_, other->number_of_deltas_);
}

std::string FrameDecodedEvents::GetTypeName() const {
  return "webrtc.rtclog2.FrameDecodedEvents";
}


// ===================================================================

void BeginLogEvent::InitAsDefaultInstance() {
}
class BeginLogEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BeginLogEvent>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_utc_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BeginLogEvent::BeginLogEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.BeginLogEvent)
}
BeginLogEvent::BeginLogEvent(const BeginLogEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BeginLogEvent)
}

void BeginLogEvent::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(version_));
}

BeginLogEvent::~BeginLogEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BeginLogEvent)
  SharedDtor();
}

void BeginLogEvent::SharedDtor() {
}

void BeginLogEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeginLogEvent& BeginLogEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BeginLogEvent_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void BeginLogEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BeginLogEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeginLogEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 utc_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_utc_time_ms(&has_bits);
          utc_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeginLogEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.BeginLogEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 utc_time_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_utc_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &utc_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.BeginLogEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.BeginLogEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeginLogEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.BeginLogEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional int64 utc_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->utc_time_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.BeginLogEvent)
}

size_t BeginLogEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BeginLogEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional int64 utc_time_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->utc_time_ms());
    }

    // optional uint32 version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginLogEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BeginLogEvent*>(
      &from));
}

void BeginLogEvent::MergeFrom(const BeginLogEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BeginLogEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      utc_time_ms_ = from.utc_time_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeginLogEvent::CopyFrom(const BeginLogEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BeginLogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginLogEvent::IsInitialized() const {
  return true;
}

void BeginLogEvent::InternalSwap(BeginLogEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(utc_time_ms_, other->utc_time_ms_);
  swap(version_, other->version_);
}

std::string BeginLogEvent::GetTypeName() const {
  return "webrtc.rtclog2.BeginLogEvent";
}


// ===================================================================

void EndLogEvent::InitAsDefaultInstance() {
}
class EndLogEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<EndLogEvent>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EndLogEvent::EndLogEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.EndLogEvent)
}
EndLogEvent::EndLogEvent(const EndLogEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_ = from.timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.EndLogEvent)
}

void EndLogEvent::SharedCtor() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
}

EndLogEvent::~EndLogEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.EndLogEvent)
  SharedDtor();
}

void EndLogEvent::SharedDtor() {
}

void EndLogEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndLogEvent& EndLogEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndLogEvent_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void EndLogEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.EndLogEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EndLogEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EndLogEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.EndLogEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.EndLogEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.EndLogEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EndLogEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.EndLogEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.EndLogEvent)
}

size_t EndLogEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.EndLogEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 timestamp_ms = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->timestamp_ms());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndLogEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EndLogEvent*>(
      &from));
}

void EndLogEvent::MergeFrom(const EndLogEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.EndLogEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp_ms()) {
    set_timestamp_ms(from.timestamp_ms());
  }
}

void EndLogEvent::CopyFrom(const EndLogEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.EndLogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndLogEvent::IsInitialized() const {
  return true;
}

void EndLogEvent::InternalSwap(EndLogEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_ms_, other->timestamp_ms_);
}

std::string EndLogEvent::GetTypeName() const {
  return "webrtc.rtclog2.EndLogEvent";
}


// ===================================================================

void LossBasedBweUpdates::InitAsDefaultInstance() {
}
class LossBasedBweUpdates::_Internal {
 public:
  using HasBits = decltype(std::declval<LossBasedBweUpdates>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fraction_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_total_packets(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bitrate_bps_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fraction_loss_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_packets_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LossBasedBweUpdates::LossBasedBweUpdates()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.LossBasedBweUpdates)
}
LossBasedBweUpdates::LossBasedBweUpdates(const LossBasedBweUpdates& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  bitrate_bps_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_bitrate_bps_deltas()) {
    bitrate_bps_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bitrate_bps_deltas_);
  }
  fraction_loss_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_fraction_loss_deltas()) {
    fraction_loss_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fraction_loss_deltas_);
  }
  total_packets_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_total_packets_deltas()) {
    total_packets_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.total_packets_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.LossBasedBweUpdates)
}

void LossBasedBweUpdates::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LossBasedBweUpdates_rtc_5fevent_5flog2_2eproto.base);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bitrate_bps_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fraction_loss_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_packets_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

LossBasedBweUpdates::~LossBasedBweUpdates() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.LossBasedBweUpdates)
  SharedDtor();
}

void LossBasedBweUpdates::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bitrate_bps_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fraction_loss_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_packets_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LossBasedBweUpdates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LossBasedBweUpdates& LossBasedBweUpdates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LossBasedBweUpdates_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void LossBasedBweUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.LossBasedBweUpdates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      bitrate_bps_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      fraction_loss_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      total_packets_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_packets_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(total_packets_));
  }
  number_of_deltas_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LossBasedBweUpdates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bitrate_bps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bitrate_bps(&has_bits);
          bitrate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fraction_loss = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fraction_loss(&has_bits);
          fraction_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_packets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_total_packets(&has_bits);
          total_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_deltas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_timestamp_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes bitrate_bps_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_bitrate_bps_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes fraction_loss_deltas = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_fraction_loss_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes total_packets_deltas = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_total_packets_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LossBasedBweUpdates::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.LossBasedBweUpdates)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bitrate_bps = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_bitrate_bps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fraction_loss = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_fraction_loss(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fraction_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_packets = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_total_packets(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_number_of_deltas(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bitrate_bps_deltas = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitrate_bps_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes fraction_loss_deltas = 103;
      case 103: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fraction_loss_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes total_packets_deltas = 104;
      case 104: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (834 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_total_packets_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.LossBasedBweUpdates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.LossBasedBweUpdates)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LossBasedBweUpdates::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.LossBasedBweUpdates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 bitrate_bps = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->bitrate_bps(), output);
  }

  // optional uint32 fraction_loss = 3;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->fraction_loss(), output);
  }

  // optional uint32 total_packets = 4;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->total_packets(), output);
  }

  // optional uint32 number_of_deltas = 5;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes bitrate_bps_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->bitrate_bps_deltas(), output);
  }

  // optional bytes fraction_loss_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->fraction_loss_deltas(), output);
  }

  // optional bytes total_packets_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      104, this->total_packets_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.LossBasedBweUpdates)
}

size_t LossBasedBweUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.LossBasedBweUpdates)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes bitrate_bps_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->bitrate_bps_deltas());
    }

    // optional bytes fraction_loss_deltas = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->fraction_loss_deltas());
    }

    // optional bytes total_packets_deltas = 104;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->total_packets_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 bitrate_bps = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->bitrate_bps());
    }

    // optional uint32 fraction_loss = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->fraction_loss());
    }

    // optional uint32 total_packets = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->total_packets());
    }

  }
  // optional uint32 number_of_deltas = 5;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->number_of_deltas());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LossBasedBweUpdates::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LossBasedBweUpdates*>(
      &from));
}

void LossBasedBweUpdates::MergeFrom(const LossBasedBweUpdates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.LossBasedBweUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      bitrate_bps_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bitrate_bps_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      fraction_loss_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fraction_loss_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      total_packets_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.total_packets_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000040u) {
      fraction_loss_ = from.fraction_loss_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_packets_ = from.total_packets_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_number_of_deltas(from.number_of_deltas());
  }
}

void LossBasedBweUpdates::CopyFrom(const LossBasedBweUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.LossBasedBweUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossBasedBweUpdates::IsInitialized() const {
  return true;
}

void LossBasedBweUpdates::InternalSwap(LossBasedBweUpdates* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bitrate_bps_deltas_.Swap(&other->bitrate_bps_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fraction_loss_deltas_.Swap(&other->fraction_loss_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  total_packets_deltas_.Swap(&other->total_packets_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(bitrate_bps_, other->bitrate_bps_);
  swap(fraction_loss_, other->fraction_loss_);
  swap(total_packets_, other->total_packets_);
  swap(number_of_deltas_, other->number_of_deltas_);
}

std::string LossBasedBweUpdates::GetTypeName() const {
  return "webrtc.rtclog2.LossBasedBweUpdates";
}


// ===================================================================

void DelayBasedBweUpdates::InitAsDefaultInstance() {
}
class DelayBasedBweUpdates::_Internal {
 public:
  using HasBits = decltype(std::declval<DelayBasedBweUpdates>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_detector_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bitrate_bps_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_detector_state_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DelayBasedBweUpdates::DelayBasedBweUpdates()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.DelayBasedBweUpdates)
}
DelayBasedBweUpdates::DelayBasedBweUpdates(const DelayBasedBweUpdates& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  bitrate_bps_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_bitrate_bps_deltas()) {
    bitrate_bps_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bitrate_bps_deltas_);
  }
  detector_state_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_detector_state_deltas()) {
    detector_state_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detector_state_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.DelayBasedBweUpdates)
}

void DelayBasedBweUpdates::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelayBasedBweUpdates_rtc_5fevent_5flog2_2eproto.base);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bitrate_bps_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detector_state_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

DelayBasedBweUpdates::~DelayBasedBweUpdates() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.DelayBasedBweUpdates)
  SharedDtor();
}

void DelayBasedBweUpdates::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bitrate_bps_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detector_state_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelayBasedBweUpdates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelayBasedBweUpdates& DelayBasedBweUpdates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelayBasedBweUpdates_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void DelayBasedBweUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.DelayBasedBweUpdates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      bitrate_bps_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      detector_state_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DelayBasedBweUpdates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bitrate_bps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bitrate_bps(&has_bits);
          bitrate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState_IsValid(val))) {
            set_detector_state(static_cast<::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_deltas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_timestamp_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes bitrate_bps_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_bitrate_bps_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes detector_state_deltas = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_detector_state_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DelayBasedBweUpdates::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.DelayBasedBweUpdates)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bitrate_bps = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_bitrate_bps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState_IsValid(value)) {
            set_detector_state(static_cast< ::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_number_of_deltas(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bitrate_bps_deltas = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitrate_bps_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes detector_state_deltas = 103;
      case 103: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_detector_state_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.DelayBasedBweUpdates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.DelayBasedBweUpdates)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DelayBasedBweUpdates::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.DelayBasedBweUpdates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 bitrate_bps = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->bitrate_bps(), output);
  }

  // optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->detector_state(), output);
  }

  // optional uint32 number_of_deltas = 4;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes bitrate_bps_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->bitrate_bps_deltas(), output);
  }

  // optional bytes detector_state_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->detector_state_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.DelayBasedBweUpdates)
}

size_t DelayBasedBweUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.DelayBasedBweUpdates)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes bitrate_bps_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->bitrate_bps_deltas());
    }

    // optional bytes detector_state_deltas = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->detector_state_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 bitrate_bps = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->bitrate_bps());
    }

    // optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->detector_state());
    }

    // optional uint32 number_of_deltas = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelayBasedBweUpdates::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DelayBasedBweUpdates*>(
      &from));
}

void DelayBasedBweUpdates::MergeFrom(const DelayBasedBweUpdates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.DelayBasedBweUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      bitrate_bps_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bitrate_bps_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      detector_state_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detector_state_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000020u) {
      detector_state_ = from.detector_state_;
    }
    if (cached_has_bits & 0x00000040u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelayBasedBweUpdates::CopyFrom(const DelayBasedBweUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.DelayBasedBweUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelayBasedBweUpdates::IsInitialized() const {
  return true;
}

void DelayBasedBweUpdates::InternalSwap(DelayBasedBweUpdates* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bitrate_bps_deltas_.Swap(&other->bitrate_bps_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  detector_state_deltas_.Swap(&other->detector_state_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(bitrate_bps_, other->bitrate_bps_);
  swap(detector_state_, other->detector_state_);
  swap(number_of_deltas_, other->number_of_deltas_);
}

std::string DelayBasedBweUpdates::GetTypeName() const {
  return "webrtc.rtclog2.DelayBasedBweUpdates";
}


// ===================================================================

void RtpHeaderExtensionConfig::InitAsDefaultInstance() {
}
class RtpHeaderExtensionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RtpHeaderExtensionConfig>()._has_bits_);
  static void set_has_transmission_time_offset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_absolute_send_time_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transport_sequence_number_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_video_rotation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_audio_level_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RtpHeaderExtensionConfig::RtpHeaderExtensionConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.RtpHeaderExtensionConfig)
}
RtpHeaderExtensionConfig::RtpHeaderExtensionConfig(const RtpHeaderExtensionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transmission_time_offset_id_, &from.transmission_time_offset_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_level_id_) -
    reinterpret_cast<char*>(&transmission_time_offset_id_)) + sizeof(audio_level_id_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.RtpHeaderExtensionConfig)
}

void RtpHeaderExtensionConfig::SharedCtor() {
  ::memset(&transmission_time_offset_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_level_id_) -
      reinterpret_cast<char*>(&transmission_time_offset_id_)) + sizeof(audio_level_id_));
}

RtpHeaderExtensionConfig::~RtpHeaderExtensionConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.RtpHeaderExtensionConfig)
  SharedDtor();
}

void RtpHeaderExtensionConfig::SharedDtor() {
}

void RtpHeaderExtensionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RtpHeaderExtensionConfig& RtpHeaderExtensionConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RtpHeaderExtensionConfig_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void RtpHeaderExtensionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&transmission_time_offset_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audio_level_id_) -
        reinterpret_cast<char*>(&transmission_time_offset_id_)) + sizeof(audio_level_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RtpHeaderExtensionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 transmission_time_offset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_transmission_time_offset_id(&has_bits);
          transmission_time_offset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 absolute_send_time_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_absolute_send_time_id(&has_bits);
          absolute_send_time_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 transport_sequence_number_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_transport_sequence_number_id(&has_bits);
          transport_sequence_number_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 video_rotation_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_video_rotation_id(&has_bits);
          video_rotation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 audio_level_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_audio_level_id(&has_bits);
          audio_level_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RtpHeaderExtensionConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 transmission_time_offset_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_transmission_time_offset_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmission_time_offset_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 absolute_send_time_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_absolute_send_time_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &absolute_send_time_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transport_sequence_number_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_transport_sequence_number_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &transport_sequence_number_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 video_rotation_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_video_rotation_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_rotation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 audio_level_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_audio_level_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.RtpHeaderExtensionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.RtpHeaderExtensionConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RtpHeaderExtensionConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 transmission_time_offset_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->transmission_time_offset_id(), output);
  }

  // optional int32 absolute_send_time_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->absolute_send_time_id(), output);
  }

  // optional int32 transport_sequence_number_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->transport_sequence_number_id(), output);
  }

  // optional int32 video_rotation_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->video_rotation_id(), output);
  }

  // optional int32 audio_level_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->audio_level_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.RtpHeaderExtensionConfig)
}

size_t RtpHeaderExtensionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 transmission_time_offset_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->transmission_time_offset_id());
    }

    // optional int32 absolute_send_time_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->absolute_send_time_id());
    }

    // optional int32 transport_sequence_number_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->transport_sequence_number_id());
    }

    // optional int32 video_rotation_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->video_rotation_id());
    }

    // optional int32 audio_level_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->audio_level_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtpHeaderExtensionConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RtpHeaderExtensionConfig*>(
      &from));
}

void RtpHeaderExtensionConfig::MergeFrom(const RtpHeaderExtensionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      transmission_time_offset_id_ = from.transmission_time_offset_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      absolute_send_time_id_ = from.absolute_send_time_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      transport_sequence_number_id_ = from.transport_sequence_number_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      video_rotation_id_ = from.video_rotation_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      audio_level_id_ = from.audio_level_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RtpHeaderExtensionConfig::CopyFrom(const RtpHeaderExtensionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtpHeaderExtensionConfig::IsInitialized() const {
  return true;
}

void RtpHeaderExtensionConfig::InternalSwap(RtpHeaderExtensionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(transmission_time_offset_id_, other->transmission_time_offset_id_);
  swap(absolute_send_time_id_, other->absolute_send_time_id_);
  swap(transport_sequence_number_id_, other->transport_sequence_number_id_);
  swap(video_rotation_id_, other->video_rotation_id_);
  swap(audio_level_id_, other->audio_level_id_);
}

std::string RtpHeaderExtensionConfig::GetTypeName() const {
  return "webrtc.rtclog2.RtpHeaderExtensionConfig";
}


// ===================================================================

void VideoRecvStreamConfig::InitAsDefaultInstance() {
  ::webrtc::rtclog2::_VideoRecvStreamConfig_default_instance_._instance.get_mutable()->header_extensions_ = const_cast< ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      ::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance());
}
class VideoRecvStreamConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoRecvStreamConfig>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remote_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_local_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rtx_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions(const VideoRecvStreamConfig* msg);
  static void set_has_header_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::webrtc::rtclog2::RtpHeaderExtensionConfig&
VideoRecvStreamConfig::_Internal::header_extensions(const VideoRecvStreamConfig* msg) {
  return *msg->header_extensions_;
}
VideoRecvStreamConfig::VideoRecvStreamConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.VideoRecvStreamConfig)
}
VideoRecvStreamConfig::VideoRecvStreamConfig(const VideoRecvStreamConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header_extensions()) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from.header_extensions_);
  } else {
    header_extensions_ = nullptr;
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtx_ssrc_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(rtx_ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.VideoRecvStreamConfig)
}

void VideoRecvStreamConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoRecvStreamConfig_rtc_5fevent_5flog2_2eproto.base);
  ::memset(&header_extensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtx_ssrc_) -
      reinterpret_cast<char*>(&header_extensions_)) + sizeof(rtx_ssrc_));
}

VideoRecvStreamConfig::~VideoRecvStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.VideoRecvStreamConfig)
  SharedDtor();
}

void VideoRecvStreamConfig::SharedDtor() {
  if (this != internal_default_instance()) delete header_extensions_;
}

void VideoRecvStreamConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoRecvStreamConfig& VideoRecvStreamConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoRecvStreamConfig_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void VideoRecvStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.VideoRecvStreamConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_extensions_ != nullptr);
    header_extensions_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtx_ssrc_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(rtx_ssrc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VideoRecvStreamConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 remote_ssrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_remote_ssrc(&has_bits);
          remote_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 local_ssrc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_local_ssrc(&has_bits);
          local_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtx_ssrc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rtx_ssrc(&has_bits);
          rtx_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_header_extensions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VideoRecvStreamConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.VideoRecvStreamConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remote_ssrc = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_remote_ssrc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_ssrc = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_local_ssrc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtx_ssrc = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_rtx_ssrc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtx_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.VideoRecvStreamConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.VideoRecvStreamConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VideoRecvStreamConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.VideoRecvStreamConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 remote_ssrc = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->remote_ssrc(), output);
  }

  // optional uint32 local_ssrc = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->local_ssrc(), output);
  }

  // optional uint32 rtx_ssrc = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->rtx_ssrc(), output);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::header_extensions(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.VideoRecvStreamConfig)
}

size_t VideoRecvStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.VideoRecvStreamConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 remote_ssrc = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->remote_ssrc());
    }

    // optional uint32 local_ssrc = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->local_ssrc());
    }

    // optional uint32 rtx_ssrc = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->rtx_ssrc());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoRecvStreamConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VideoRecvStreamConfig*>(
      &from));
}

void VideoRecvStreamConfig::MergeFrom(const VideoRecvStreamConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.VideoRecvStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(from.header_extensions());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      remote_ssrc_ = from.remote_ssrc_;
    }
    if (cached_has_bits & 0x00000008u) {
      local_ssrc_ = from.local_ssrc_;
    }
    if (cached_has_bits & 0x00000010u) {
      rtx_ssrc_ = from.rtx_ssrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoRecvStreamConfig::CopyFrom(const VideoRecvStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.VideoRecvStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRecvStreamConfig::IsInitialized() const {
  return true;
}

void VideoRecvStreamConfig::InternalSwap(VideoRecvStreamConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_extensions_, other->header_extensions_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(remote_ssrc_, other->remote_ssrc_);
  swap(local_ssrc_, other->local_ssrc_);
  swap(rtx_ssrc_, other->rtx_ssrc_);
}

std::string VideoRecvStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.VideoRecvStreamConfig";
}


// ===================================================================

void VideoSendStreamConfig::InitAsDefaultInstance() {
  ::webrtc::rtclog2::_VideoSendStreamConfig_default_instance_._instance.get_mutable()->header_extensions_ = const_cast< ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      ::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance());
}
class VideoSendStreamConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoSendStreamConfig>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rtx_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions(const VideoSendStreamConfig* msg);
  static void set_has_header_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::webrtc::rtclog2::RtpHeaderExtensionConfig&
VideoSendStreamConfig::_Internal::header_extensions(const VideoSendStreamConfig* msg) {
  return *msg->header_extensions_;
}
VideoSendStreamConfig::VideoSendStreamConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.VideoSendStreamConfig)
}
VideoSendStreamConfig::VideoSendStreamConfig(const VideoSendStreamConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header_extensions()) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from.header_extensions_);
  } else {
    header_extensions_ = nullptr;
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtx_ssrc_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(rtx_ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.VideoSendStreamConfig)
}

void VideoSendStreamConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoSendStreamConfig_rtc_5fevent_5flog2_2eproto.base);
  ::memset(&header_extensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtx_ssrc_) -
      reinterpret_cast<char*>(&header_extensions_)) + sizeof(rtx_ssrc_));
}

VideoSendStreamConfig::~VideoSendStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.VideoSendStreamConfig)
  SharedDtor();
}

void VideoSendStreamConfig::SharedDtor() {
  if (this != internal_default_instance()) delete header_extensions_;
}

void VideoSendStreamConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoSendStreamConfig& VideoSendStreamConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoSendStreamConfig_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void VideoSendStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.VideoSendStreamConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_extensions_ != nullptr);
    header_extensions_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtx_ssrc_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(rtx_ssrc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VideoSendStreamConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ssrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ssrc(&has_bits);
          ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtx_ssrc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rtx_ssrc(&has_bits);
          rtx_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_header_extensions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VideoSendStreamConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.VideoSendStreamConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ssrc = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_ssrc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtx_ssrc = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_rtx_ssrc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtx_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.VideoSendStreamConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.VideoSendStreamConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VideoSendStreamConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.VideoSendStreamConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 ssrc = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->ssrc(), output);
  }

  // optional uint32 rtx_ssrc = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->rtx_ssrc(), output);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::header_extensions(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.VideoSendStreamConfig)
}

size_t VideoSendStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.VideoSendStreamConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 ssrc = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ssrc());
    }

    // optional uint32 rtx_ssrc = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->rtx_ssrc());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoSendStreamConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VideoSendStreamConfig*>(
      &from));
}

void VideoSendStreamConfig::MergeFrom(const VideoSendStreamConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.VideoSendStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(from.header_extensions());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      ssrc_ = from.ssrc_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtx_ssrc_ = from.rtx_ssrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoSendStreamConfig::CopyFrom(const VideoSendStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.VideoSendStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSendStreamConfig::IsInitialized() const {
  return true;
}

void VideoSendStreamConfig::InternalSwap(VideoSendStreamConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_extensions_, other->header_extensions_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(ssrc_, other->ssrc_);
  swap(rtx_ssrc_, other->rtx_ssrc_);
}

std::string VideoSendStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.VideoSendStreamConfig";
}


// ===================================================================

void AudioRecvStreamConfig::InitAsDefaultInstance() {
  ::webrtc::rtclog2::_AudioRecvStreamConfig_default_instance_._instance.get_mutable()->header_extensions_ = const_cast< ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      ::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance());
}
class AudioRecvStreamConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioRecvStreamConfig>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remote_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_local_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions(const AudioRecvStreamConfig* msg);
  static void set_has_header_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::webrtc::rtclog2::RtpHeaderExtensionConfig&
AudioRecvStreamConfig::_Internal::header_extensions(const AudioRecvStreamConfig* msg) {
  return *msg->header_extensions_;
}
AudioRecvStreamConfig::AudioRecvStreamConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.AudioRecvStreamConfig)
}
AudioRecvStreamConfig::AudioRecvStreamConfig(const AudioRecvStreamConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header_extensions()) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from.header_extensions_);
  } else {
    header_extensions_ = nullptr;
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_ssrc_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(local_ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioRecvStreamConfig)
}

void AudioRecvStreamConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioRecvStreamConfig_rtc_5fevent_5flog2_2eproto.base);
  ::memset(&header_extensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_ssrc_) -
      reinterpret_cast<char*>(&header_extensions_)) + sizeof(local_ssrc_));
}

AudioRecvStreamConfig::~AudioRecvStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioRecvStreamConfig)
  SharedDtor();
}

void AudioRecvStreamConfig::SharedDtor() {
  if (this != internal_default_instance()) delete header_extensions_;
}

void AudioRecvStreamConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioRecvStreamConfig& AudioRecvStreamConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioRecvStreamConfig_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void AudioRecvStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioRecvStreamConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_extensions_ != nullptr);
    header_extensions_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&local_ssrc_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(local_ssrc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AudioRecvStreamConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 remote_ssrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_remote_ssrc(&has_bits);
          remote_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 local_ssrc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_local_ssrc(&has_bits);
          local_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_header_extensions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AudioRecvStreamConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.AudioRecvStreamConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remote_ssrc = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_remote_ssrc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_ssrc = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_local_ssrc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.AudioRecvStreamConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.AudioRecvStreamConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AudioRecvStreamConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.AudioRecvStreamConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 remote_ssrc = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->remote_ssrc(), output);
  }

  // optional uint32 local_ssrc = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->local_ssrc(), output);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::header_extensions(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.AudioRecvStreamConfig)
}

size_t AudioRecvStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioRecvStreamConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 remote_ssrc = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->remote_ssrc());
    }

    // optional uint32 local_ssrc = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->local_ssrc());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioRecvStreamConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AudioRecvStreamConfig*>(
      &from));
}

void AudioRecvStreamConfig::MergeFrom(const AudioRecvStreamConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioRecvStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(from.header_extensions());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      remote_ssrc_ = from.remote_ssrc_;
    }
    if (cached_has_bits & 0x00000008u) {
      local_ssrc_ = from.local_ssrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioRecvStreamConfig::CopyFrom(const AudioRecvStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioRecvStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioRecvStreamConfig::IsInitialized() const {
  return true;
}

void AudioRecvStreamConfig::InternalSwap(AudioRecvStreamConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_extensions_, other->header_extensions_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(remote_ssrc_, other->remote_ssrc_);
  swap(local_ssrc_, other->local_ssrc_);
}

std::string AudioRecvStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.AudioRecvStreamConfig";
}


// ===================================================================

void AudioSendStreamConfig::InitAsDefaultInstance() {
  ::webrtc::rtclog2::_AudioSendStreamConfig_default_instance_._instance.get_mutable()->header_extensions_ = const_cast< ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      ::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance());
}
class AudioSendStreamConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioSendStreamConfig>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions(const AudioSendStreamConfig* msg);
  static void set_has_header_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::webrtc::rtclog2::RtpHeaderExtensionConfig&
AudioSendStreamConfig::_Internal::header_extensions(const AudioSendStreamConfig* msg) {
  return *msg->header_extensions_;
}
AudioSendStreamConfig::AudioSendStreamConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.AudioSendStreamConfig)
}
AudioSendStreamConfig::AudioSendStreamConfig(const AudioSendStreamConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header_extensions()) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from.header_extensions_);
  } else {
    header_extensions_ = nullptr;
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&ssrc_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioSendStreamConfig)
}

void AudioSendStreamConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioSendStreamConfig_rtc_5fevent_5flog2_2eproto.base);
  ::memset(&header_extensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ssrc_) -
      reinterpret_cast<char*>(&header_extensions_)) + sizeof(ssrc_));
}

AudioSendStreamConfig::~AudioSendStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioSendStreamConfig)
  SharedDtor();
}

void AudioSendStreamConfig::SharedDtor() {
  if (this != internal_default_instance()) delete header_extensions_;
}

void AudioSendStreamConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioSendStreamConfig& AudioSendStreamConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioSendStreamConfig_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void AudioSendStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioSendStreamConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_extensions_ != nullptr);
    header_extensions_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ssrc_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(ssrc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AudioSendStreamConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ssrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ssrc(&has_bits);
          ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_header_extensions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AudioSendStreamConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.AudioSendStreamConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ssrc = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_ssrc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.AudioSendStreamConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.AudioSendStreamConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AudioSendStreamConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.AudioSendStreamConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 ssrc = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->ssrc(), output);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::header_extensions(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.AudioSendStreamConfig)
}

size_t AudioSendStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioSendStreamConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 ssrc = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ssrc());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioSendStreamConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AudioSendStreamConfig*>(
      &from));
}

void AudioSendStreamConfig::MergeFrom(const AudioSendStreamConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioSendStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(from.header_extensions());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      ssrc_ = from.ssrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioSendStreamConfig::CopyFrom(const AudioSendStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioSendStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioSendStreamConfig::IsInitialized() const {
  return true;
}

void AudioSendStreamConfig::InternalSwap(AudioSendStreamConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_extensions_, other->header_extensions_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(ssrc_, other->ssrc_);
}

std::string AudioSendStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.AudioSendStreamConfig";
}


// ===================================================================

void AudioNetworkAdaptations::InitAsDefaultInstance() {
}
class AudioNetworkAdaptations::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioNetworkAdaptations>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_frame_length_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_uplink_packet_loss_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_enable_fec(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_enable_dtx(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_num_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bitrate_bps_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_length_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uplink_packet_loss_fraction_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_fec_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enable_dtx_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_channels_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

AudioNetworkAdaptations::AudioNetworkAdaptations()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.AudioNetworkAdaptations)
}
AudioNetworkAdaptations::AudioNetworkAdaptations(const AudioNetworkAdaptations& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  bitrate_bps_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_bitrate_bps_deltas()) {
    bitrate_bps_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bitrate_bps_deltas_);
  }
  frame_length_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_frame_length_ms_deltas()) {
    frame_length_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_length_ms_deltas_);
  }
  uplink_packet_loss_fraction_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_uplink_packet_loss_fraction_deltas()) {
    uplink_packet_loss_fraction_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uplink_packet_loss_fraction_deltas_);
  }
  enable_fec_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_enable_fec_deltas()) {
    enable_fec_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enable_fec_deltas_);
  }
  enable_dtx_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_enable_dtx_deltas()) {
    enable_dtx_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enable_dtx_deltas_);
  }
  num_channels_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_num_channels_deltas()) {
    num_channels_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.num_channels_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioNetworkAdaptations)
}

void AudioNetworkAdaptations::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioNetworkAdaptations_rtc_5fevent_5flog2_2eproto.base);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bitrate_bps_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_length_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uplink_packet_loss_fraction_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enable_fec_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enable_dtx_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_channels_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

AudioNetworkAdaptations::~AudioNetworkAdaptations() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioNetworkAdaptations)
  SharedDtor();
}

void AudioNetworkAdaptations::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bitrate_bps_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_length_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uplink_packet_loss_fraction_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enable_fec_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enable_dtx_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_channels_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioNetworkAdaptations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioNetworkAdaptations& AudioNetworkAdaptations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioNetworkAdaptations_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void AudioNetworkAdaptations::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioNetworkAdaptations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      bitrate_bps_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      frame_length_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      uplink_packet_loss_fraction_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      enable_fec_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      enable_dtx_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      num_channels_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&bitrate_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&bitrate_bps_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AudioNetworkAdaptations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bitrate_bps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bitrate_bps(&has_bits);
          bitrate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 frame_length_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_frame_length_ms(&has_bits);
          frame_length_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uplink_packet_loss_fraction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uplink_packet_loss_fraction(&has_bits);
          uplink_packet_loss_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_fec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enable_fec(&has_bits);
          enable_fec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_dtx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enable_dtx(&has_bits);
          enable_dtx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_channels = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_channels(&has_bits);
          num_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_deltas = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_timestamp_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes bitrate_bps_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_bitrate_bps_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes frame_length_ms_deltas = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_frame_length_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes uplink_packet_loss_fraction_deltas = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_uplink_packet_loss_fraction_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes enable_fec_deltas = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_enable_fec_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes enable_dtx_deltas = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_enable_dtx_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes num_channels_deltas = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_num_channels_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AudioNetworkAdaptations::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.AudioNetworkAdaptations)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bitrate_bps = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_bitrate_bps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 frame_length_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_frame_length_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_length_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uplink_packet_loss_fraction = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_uplink_packet_loss_fraction(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uplink_packet_loss_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_fec = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_enable_fec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_fec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_dtx = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_enable_dtx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_dtx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_channels = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_num_channels(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_number_of_deltas(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bitrate_bps_deltas = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitrate_bps_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes frame_length_ms_deltas = 103;
      case 103: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frame_length_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes uplink_packet_loss_fraction_deltas = 104;
      case 104: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (834 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uplink_packet_loss_fraction_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes enable_fec_deltas = 105;
      case 105: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (842 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enable_fec_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes enable_dtx_deltas = 106;
      case 106: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (850 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enable_dtx_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes num_channels_deltas = 107;
      case 107: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (858 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_num_channels_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.AudioNetworkAdaptations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.AudioNetworkAdaptations)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AudioNetworkAdaptations::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.AudioNetworkAdaptations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional int32 bitrate_bps = 2;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->bitrate_bps(), output);
  }

  // optional int32 frame_length_ms = 3;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->frame_length_ms(), output);
  }

  // optional uint32 uplink_packet_loss_fraction = 4;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->uplink_packet_loss_fraction(), output);
  }

  // optional bool enable_fec = 5;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->enable_fec(), output);
  }

  // optional bool enable_dtx = 6;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->enable_dtx(), output);
  }

  // optional uint32 num_channels = 7;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->num_channels(), output);
  }

  // optional uint32 number_of_deltas = 8;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes bitrate_bps_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->bitrate_bps_deltas(), output);
  }

  // optional bytes frame_length_ms_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->frame_length_ms_deltas(), output);
  }

  // optional bytes uplink_packet_loss_fraction_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      104, this->uplink_packet_loss_fraction_deltas(), output);
  }

  // optional bytes enable_fec_deltas = 105;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      105, this->enable_fec_deltas(), output);
  }

  // optional bytes enable_dtx_deltas = 106;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      106, this->enable_dtx_deltas(), output);
  }

  // optional bytes num_channels_deltas = 107;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      107, this->num_channels_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.AudioNetworkAdaptations)
}

size_t AudioNetworkAdaptations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioNetworkAdaptations)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes bitrate_bps_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->bitrate_bps_deltas());
    }

    // optional bytes frame_length_ms_deltas = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->frame_length_ms_deltas());
    }

    // optional bytes uplink_packet_loss_fraction_deltas = 104;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->uplink_packet_loss_fraction_deltas());
    }

    // optional bytes enable_fec_deltas = 105;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->enable_fec_deltas());
    }

    // optional bytes enable_dtx_deltas = 106;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->enable_dtx_deltas());
    }

    // optional bytes num_channels_deltas = 107;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->num_channels_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int32 bitrate_bps = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->bitrate_bps());
    }

    // optional int32 frame_length_ms = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->frame_length_ms());
    }

    // optional uint32 uplink_packet_loss_fraction = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->uplink_packet_loss_fraction());
    }

    // optional bool enable_fec = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool enable_dtx = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional uint32 num_channels = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num_channels());
    }

    // optional uint32 number_of_deltas = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioNetworkAdaptations::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AudioNetworkAdaptations*>(
      &from));
}

void AudioNetworkAdaptations::MergeFrom(const AudioNetworkAdaptations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioNetworkAdaptations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      bitrate_bps_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bitrate_bps_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      frame_length_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_length_ms_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      uplink_packet_loss_fraction_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uplink_packet_loss_fraction_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      enable_fec_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enable_fec_deltas_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      enable_dtx_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enable_dtx_deltas_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      num_channels_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.num_channels_deltas_);
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000200u) {
      frame_length_ms_ = from.frame_length_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      uplink_packet_loss_fraction_ = from.uplink_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000800u) {
      enable_fec_ = from.enable_fec_;
    }
    if (cached_has_bits & 0x00001000u) {
      enable_dtx_ = from.enable_dtx_;
    }
    if (cached_has_bits & 0x00002000u) {
      num_channels_ = from.num_channels_;
    }
    if (cached_has_bits & 0x00004000u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioNetworkAdaptations::CopyFrom(const AudioNetworkAdaptations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioNetworkAdaptations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioNetworkAdaptations::IsInitialized() const {
  return true;
}

void AudioNetworkAdaptations::InternalSwap(AudioNetworkAdaptations* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bitrate_bps_deltas_.Swap(&other->bitrate_bps_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  frame_length_ms_deltas_.Swap(&other->frame_length_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uplink_packet_loss_fraction_deltas_.Swap(&other->uplink_packet_loss_fraction_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  enable_fec_deltas_.Swap(&other->enable_fec_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  enable_dtx_deltas_.Swap(&other->enable_dtx_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  num_channels_deltas_.Swap(&other->num_channels_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(bitrate_bps_, other->bitrate_bps_);
  swap(frame_length_ms_, other->frame_length_ms_);
  swap(uplink_packet_loss_fraction_, other->uplink_packet_loss_fraction_);
  swap(enable_fec_, other->enable_fec_);
  swap(enable_dtx_, other->enable_dtx_);
  swap(num_channels_, other->num_channels_);
  swap(number_of_deltas_, other->number_of_deltas_);
}

std::string AudioNetworkAdaptations::GetTypeName() const {
  return "webrtc.rtclog2.AudioNetworkAdaptations";
}


// ===================================================================

void BweProbeCluster::InitAsDefaultInstance() {
}
class BweProbeCluster::_Internal {
 public:
  using HasBits = decltype(std::declval<BweProbeCluster>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_packets(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

BweProbeCluster::BweProbeCluster()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.BweProbeCluster)
}
BweProbeCluster::BweProbeCluster(const BweProbeCluster& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_bytes_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(min_bytes_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BweProbeCluster)
}

void BweProbeCluster::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_bytes_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(min_bytes_));
}

BweProbeCluster::~BweProbeCluster() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BweProbeCluster)
  SharedDtor();
}

void BweProbeCluster::SharedDtor() {
}

void BweProbeCluster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BweProbeCluster& BweProbeCluster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BweProbeCluster_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void BweProbeCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BweProbeCluster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_bytes_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(min_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BweProbeCluster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bitrate_bps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bitrate_bps(&has_bits);
          bitrate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_packets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_min_packets(&has_bits);
          min_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_min_bytes(&has_bits);
          min_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BweProbeCluster::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.BweProbeCluster)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bitrate_bps = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_bitrate_bps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_packets = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_min_packets(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_bytes = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_min_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.BweProbeCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.BweProbeCluster)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BweProbeCluster::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.BweProbeCluster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 bitrate_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->bitrate_bps(), output);
  }

  // optional uint32 min_packets = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->min_packets(), output);
  }

  // optional uint32 min_bytes = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->min_bytes(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.BweProbeCluster)
}

size_t BweProbeCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BweProbeCluster)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 bitrate_bps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->bitrate_bps());
    }

    // optional uint32 min_packets = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->min_packets());
    }

    // optional uint32 min_bytes = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->min_bytes());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BweProbeCluster::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BweProbeCluster*>(
      &from));
}

void BweProbeCluster::MergeFrom(const BweProbeCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BweProbeCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_packets_ = from.min_packets_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_bytes_ = from.min_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BweProbeCluster::CopyFrom(const BweProbeCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BweProbeCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BweProbeCluster::IsInitialized() const {
  return true;
}

void BweProbeCluster::InternalSwap(BweProbeCluster* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(id_, other->id_);
  swap(bitrate_bps_, other->bitrate_bps_);
  swap(min_packets_, other->min_packets_);
  swap(min_bytes_, other->min_bytes_);
}

std::string BweProbeCluster::GetTypeName() const {
  return "webrtc.rtclog2.BweProbeCluster";
}


// ===================================================================

void BweProbeResultSuccess::InitAsDefaultInstance() {
}
class BweProbeResultSuccess::_Internal {
 public:
  using HasBits = decltype(std::declval<BweProbeResultSuccess>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BweProbeResultSuccess::BweProbeResultSuccess()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.BweProbeResultSuccess)
}
BweProbeResultSuccess::BweProbeResultSuccess(const BweProbeResultSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&bitrate_bps_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(bitrate_bps_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BweProbeResultSuccess)
}

void BweProbeResultSuccess::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bitrate_bps_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(bitrate_bps_));
}

BweProbeResultSuccess::~BweProbeResultSuccess() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BweProbeResultSuccess)
  SharedDtor();
}

void BweProbeResultSuccess::SharedDtor() {
}

void BweProbeResultSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BweProbeResultSuccess& BweProbeResultSuccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BweProbeResultSuccess_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void BweProbeResultSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BweProbeResultSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bitrate_bps_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(bitrate_bps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BweProbeResultSuccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bitrate_bps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bitrate_bps(&has_bits);
          bitrate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BweProbeResultSuccess::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.BweProbeResultSuccess)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bitrate_bps = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_bitrate_bps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.BweProbeResultSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.BweProbeResultSuccess)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BweProbeResultSuccess::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.BweProbeResultSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 bitrate_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->bitrate_bps(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.BweProbeResultSuccess)
}

size_t BweProbeResultSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BweProbeResultSuccess)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 bitrate_bps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->bitrate_bps());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BweProbeResultSuccess::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BweProbeResultSuccess*>(
      &from));
}

void BweProbeResultSuccess::MergeFrom(const BweProbeResultSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BweProbeResultSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BweProbeResultSuccess::CopyFrom(const BweProbeResultSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BweProbeResultSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BweProbeResultSuccess::IsInitialized() const {
  return true;
}

void BweProbeResultSuccess::InternalSwap(BweProbeResultSuccess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(id_, other->id_);
  swap(bitrate_bps_, other->bitrate_bps_);
}

std::string BweProbeResultSuccess::GetTypeName() const {
  return "webrtc.rtclog2.BweProbeResultSuccess";
}


// ===================================================================

void BweProbeResultFailure::InitAsDefaultInstance() {
}
class BweProbeResultFailure::_Internal {
 public:
  using HasBits = decltype(std::declval<BweProbeResultFailure>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_failure(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BweProbeResultFailure::BweProbeResultFailure()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.BweProbeResultFailure)
}
BweProbeResultFailure::BweProbeResultFailure(const BweProbeResultFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&failure_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(failure_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BweProbeResultFailure)
}

void BweProbeResultFailure::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failure_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(failure_));
}

BweProbeResultFailure::~BweProbeResultFailure() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BweProbeResultFailure)
  SharedDtor();
}

void BweProbeResultFailure::SharedDtor() {
}

void BweProbeResultFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BweProbeResultFailure& BweProbeResultFailure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BweProbeResultFailure_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void BweProbeResultFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BweProbeResultFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failure_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(failure_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BweProbeResultFailure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::BweProbeResultFailure_FailureReason_IsValid(val))) {
            set_failure(static_cast<::webrtc::rtclog2::BweProbeResultFailure_FailureReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BweProbeResultFailure::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.BweProbeResultFailure)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::BweProbeResultFailure_FailureReason_IsValid(value)) {
            set_failure(static_cast< ::webrtc::rtclog2::BweProbeResultFailure_FailureReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.BweProbeResultFailure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.BweProbeResultFailure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BweProbeResultFailure::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.BweProbeResultFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->failure(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.BweProbeResultFailure)
}

size_t BweProbeResultFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BweProbeResultFailure)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->failure());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BweProbeResultFailure::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BweProbeResultFailure*>(
      &from));
}

void BweProbeResultFailure::MergeFrom(const BweProbeResultFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BweProbeResultFailure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      failure_ = from.failure_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BweProbeResultFailure::CopyFrom(const BweProbeResultFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BweProbeResultFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BweProbeResultFailure::IsInitialized() const {
  return true;
}

void BweProbeResultFailure::InternalSwap(BweProbeResultFailure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(id_, other->id_);
  swap(failure_, other->failure_);
}

std::string BweProbeResultFailure::GetTypeName() const {
  return "webrtc.rtclog2.BweProbeResultFailure";
}


// ===================================================================

void AlrState::InitAsDefaultInstance() {
}
class AlrState::_Internal {
 public:
  using HasBits = decltype(std::declval<AlrState>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_alr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AlrState::AlrState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.AlrState)
}
AlrState::AlrState(const AlrState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_alr_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(in_alr_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AlrState)
}

void AlrState::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_alr_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(in_alr_));
}

AlrState::~AlrState() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AlrState)
  SharedDtor();
}

void AlrState::SharedDtor() {
}

void AlrState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlrState& AlrState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlrState_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void AlrState::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AlrState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_alr_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(in_alr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlrState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool in_alr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_in_alr(&has_bits);
          in_alr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlrState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.AlrState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_alr = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_in_alr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_alr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.AlrState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.AlrState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlrState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.AlrState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bool in_alr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->in_alr(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.AlrState)
}

size_t AlrState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AlrState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional bool in_alr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlrState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AlrState*>(
      &from));
}

void AlrState::MergeFrom(const AlrState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AlrState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      in_alr_ = from.in_alr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlrState::CopyFrom(const AlrState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AlrState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlrState::IsInitialized() const {
  return true;
}

void AlrState::InternalSwap(AlrState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(in_alr_, other->in_alr_);
}

std::string AlrState::GetTypeName() const {
  return "webrtc.rtclog2.AlrState";
}


// ===================================================================

void IceCandidatePairConfig::InitAsDefaultInstance() {
}
class IceCandidatePairConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<IceCandidatePairConfig>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_config_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_candidate_pair_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_local_candidate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_local_relay_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_local_network_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_local_address_family(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_remote_candidate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_remote_address_family(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_candidate_pair_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

IceCandidatePairConfig::IceCandidatePairConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.IceCandidatePairConfig)
}
IceCandidatePairConfig::IceCandidatePairConfig(const IceCandidatePairConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&candidate_pair_protocol_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(candidate_pair_protocol_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.IceCandidatePairConfig)
}

void IceCandidatePairConfig::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&candidate_pair_protocol_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(candidate_pair_protocol_));
}

IceCandidatePairConfig::~IceCandidatePairConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.IceCandidatePairConfig)
  SharedDtor();
}

void IceCandidatePairConfig::SharedDtor() {
}

void IceCandidatePairConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IceCandidatePairConfig& IceCandidatePairConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IceCandidatePairConfig_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void IceCandidatePairConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.IceCandidatePairConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remote_candidate_type_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(remote_candidate_type_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&remote_address_family_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&candidate_pair_protocol_) -
        reinterpret_cast<char*>(&remote_address_family_)) + sizeof(candidate_pair_protocol_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IceCandidatePairConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(val))) {
            set_config_type(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 candidate_pair_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_candidate_pair_id(&has_bits);
          candidate_pair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType local_candidate_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType_IsValid(val))) {
            set_local_candidate_type(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol local_relay_protocol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_Protocol_IsValid(val))) {
            set_local_relay_protocol(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_Protocol>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.NetworkType local_network_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_NetworkType_IsValid(val))) {
            set_local_network_type(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_NetworkType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily local_address_family = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily_IsValid(val))) {
            set_local_address_family(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType_IsValid(val))) {
            set_remote_candidate_type(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily remote_address_family = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily_IsValid(val))) {
            set_remote_address_family(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol candidate_pair_protocol = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_Protocol_IsValid(val))) {
            set_candidate_pair_protocol(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_Protocol>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IceCandidatePairConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.IceCandidatePairConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(value)) {
            set_config_type(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 candidate_pair_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_candidate_pair_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &candidate_pair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType local_candidate_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType_IsValid(value)) {
            set_local_candidate_type(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol local_relay_protocol = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_Protocol_IsValid(value)) {
            set_local_relay_protocol(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_Protocol >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.NetworkType local_network_type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_NetworkType_IsValid(value)) {
            set_local_network_type(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_NetworkType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily local_address_family = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily_IsValid(value)) {
            set_local_address_family(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType_IsValid(value)) {
            set_remote_candidate_type(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily remote_address_family = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily_IsValid(value)) {
            set_remote_address_family(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol candidate_pair_protocol = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_Protocol_IsValid(value)) {
            set_candidate_pair_protocol(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_Protocol >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.IceCandidatePairConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.IceCandidatePairConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IceCandidatePairConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.IceCandidatePairConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->config_type(), output);
  }

  // optional uint32 candidate_pair_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->candidate_pair_id(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType local_candidate_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->local_candidate_type(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol local_relay_protocol = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->local_relay_protocol(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.NetworkType local_network_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->local_network_type(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily local_address_family = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->local_address_family(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->remote_candidate_type(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily remote_address_family = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->remote_address_family(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol candidate_pair_protocol = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->candidate_pair_protocol(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.IceCandidatePairConfig)
}

size_t IceCandidatePairConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.IceCandidatePairConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->config_type());
    }

    // optional uint32 candidate_pair_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->candidate_pair_id());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType local_candidate_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->local_candidate_type());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol local_relay_protocol = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->local_relay_protocol());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.NetworkType local_network_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->local_network_type());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily local_address_family = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->local_address_family());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->remote_candidate_type());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily remote_address_family = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->remote_address_family());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol candidate_pair_protocol = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->candidate_pair_protocol());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IceCandidatePairConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IceCandidatePairConfig*>(
      &from));
}

void IceCandidatePairConfig::MergeFrom(const IceCandidatePairConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.IceCandidatePairConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      config_type_ = from.config_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      candidate_pair_id_ = from.candidate_pair_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      local_candidate_type_ = from.local_candidate_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      local_relay_protocol_ = from.local_relay_protocol_;
    }
    if (cached_has_bits & 0x00000020u) {
      local_network_type_ = from.local_network_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      local_address_family_ = from.local_address_family_;
    }
    if (cached_has_bits & 0x00000080u) {
      remote_candidate_type_ = from.remote_candidate_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      remote_address_family_ = from.remote_address_family_;
    }
    if (cached_has_bits & 0x00000200u) {
      candidate_pair_protocol_ = from.candidate_pair_protocol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IceCandidatePairConfig::CopyFrom(const IceCandidatePairConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.IceCandidatePairConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IceCandidatePairConfig::IsInitialized() const {
  return true;
}

void IceCandidatePairConfig::InternalSwap(IceCandidatePairConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(config_type_, other->config_type_);
  swap(candidate_pair_id_, other->candidate_pair_id_);
  swap(local_candidate_type_, other->local_candidate_type_);
  swap(local_relay_protocol_, other->local_relay_protocol_);
  swap(local_network_type_, other->local_network_type_);
  swap(local_address_family_, other->local_address_family_);
  swap(remote_candidate_type_, other->remote_candidate_type_);
  swap(remote_address_family_, other->remote_address_family_);
  swap(candidate_pair_protocol_, other->candidate_pair_protocol_);
}

std::string IceCandidatePairConfig::GetTypeName() const {
  return "webrtc.rtclog2.IceCandidatePairConfig";
}


// ===================================================================

void IceCandidatePairEvent::InitAsDefaultInstance() {
}
class IceCandidatePairEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<IceCandidatePairEvent>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_candidate_pair_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

IceCandidatePairEvent::IceCandidatePairEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.IceCandidatePairEvent)
}
IceCandidatePairEvent::IceCandidatePairEvent(const IceCandidatePairEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&transaction_id_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(transaction_id_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.IceCandidatePairEvent)
}

void IceCandidatePairEvent::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_id_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(transaction_id_));
}

IceCandidatePairEvent::~IceCandidatePairEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.IceCandidatePairEvent)
  SharedDtor();
}

void IceCandidatePairEvent::SharedDtor() {
}

void IceCandidatePairEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IceCandidatePairEvent& IceCandidatePairEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IceCandidatePairEvent_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void IceCandidatePairEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.IceCandidatePairEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transaction_id_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(transaction_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IceCandidatePairEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairEvent.IceCandidatePairEventType event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType_IsValid(val))) {
            set_event_type(static_cast<::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 candidate_pair_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_candidate_pair_id(&has_bits);
          candidate_pair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 transaction_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_transaction_id(&has_bits);
          transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IceCandidatePairEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.IceCandidatePairEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairEvent.IceCandidatePairEventType event_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType_IsValid(value)) {
            set_event_type(static_cast< ::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 candidate_pair_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_candidate_pair_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &candidate_pair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 transaction_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_transaction_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.IceCandidatePairEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.IceCandidatePairEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IceCandidatePairEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.IceCandidatePairEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairEvent.IceCandidatePairEventType event_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // optional uint32 candidate_pair_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->candidate_pair_id(), output);
  }

  // optional uint32 transaction_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->transaction_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.IceCandidatePairEvent)
}

size_t IceCandidatePairEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.IceCandidatePairEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional .webrtc.rtclog2.IceCandidatePairEvent.IceCandidatePairEventType event_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional uint32 candidate_pair_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->candidate_pair_id());
    }

    // optional uint32 transaction_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->transaction_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IceCandidatePairEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IceCandidatePairEvent*>(
      &from));
}

void IceCandidatePairEvent::MergeFrom(const IceCandidatePairEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.IceCandidatePairEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      candidate_pair_id_ = from.candidate_pair_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      transaction_id_ = from.transaction_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IceCandidatePairEvent::CopyFrom(const IceCandidatePairEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.IceCandidatePairEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IceCandidatePairEvent::IsInitialized() const {
  return true;
}

void IceCandidatePairEvent::InternalSwap(IceCandidatePairEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(event_type_, other->event_type_);
  swap(candidate_pair_id_, other->candidate_pair_id_);
  swap(transaction_id_, other->transaction_id_);
}

std::string IceCandidatePairEvent::GetTypeName() const {
  return "webrtc.rtclog2.IceCandidatePairEvent";
}


// ===================================================================

void DtlsTransportStateEvent::InitAsDefaultInstance() {
}
class DtlsTransportStateEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DtlsTransportStateEvent>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dtls_transport_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DtlsTransportStateEvent::DtlsTransportStateEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.DtlsTransportStateEvent)
}
DtlsTransportStateEvent::DtlsTransportStateEvent(const DtlsTransportStateEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&dtls_transport_state_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(dtls_transport_state_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.DtlsTransportStateEvent)
}

void DtlsTransportStateEvent::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtls_transport_state_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(dtls_transport_state_));
}

DtlsTransportStateEvent::~DtlsTransportStateEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.DtlsTransportStateEvent)
  SharedDtor();
}

void DtlsTransportStateEvent::SharedDtor() {
}

void DtlsTransportStateEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DtlsTransportStateEvent& DtlsTransportStateEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DtlsTransportStateEvent_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void DtlsTransportStateEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.DtlsTransportStateEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dtls_transport_state_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(dtls_transport_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DtlsTransportStateEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .webrtc.rtclog2.DtlsTransportStateEvent.DtlsTransportState dtls_transport_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::DtlsTransportStateEvent_DtlsTransportState_IsValid(val))) {
            set_dtls_transport_state(static_cast<::webrtc::rtclog2::DtlsTransportStateEvent_DtlsTransportState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DtlsTransportStateEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.DtlsTransportStateEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.DtlsTransportStateEvent.DtlsTransportState dtls_transport_state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::DtlsTransportStateEvent_DtlsTransportState_IsValid(value)) {
            set_dtls_transport_state(static_cast< ::webrtc::rtclog2::DtlsTransportStateEvent_DtlsTransportState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.DtlsTransportStateEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.DtlsTransportStateEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DtlsTransportStateEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.DtlsTransportStateEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional .webrtc.rtclog2.DtlsTransportStateEvent.DtlsTransportState dtls_transport_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->dtls_transport_state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.DtlsTransportStateEvent)
}

size_t DtlsTransportStateEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.DtlsTransportStateEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional .webrtc.rtclog2.DtlsTransportStateEvent.DtlsTransportState dtls_transport_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dtls_transport_state());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DtlsTransportStateEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DtlsTransportStateEvent*>(
      &from));
}

void DtlsTransportStateEvent::MergeFrom(const DtlsTransportStateEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.DtlsTransportStateEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      dtls_transport_state_ = from.dtls_transport_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DtlsTransportStateEvent::CopyFrom(const DtlsTransportStateEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.DtlsTransportStateEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtlsTransportStateEvent::IsInitialized() const {
  return true;
}

void DtlsTransportStateEvent::InternalSwap(DtlsTransportStateEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(dtls_transport_state_, other->dtls_transport_state_);
}

std::string DtlsTransportStateEvent::GetTypeName() const {
  return "webrtc.rtclog2.DtlsTransportStateEvent";
}


// ===================================================================

void DtlsWritableState::InitAsDefaultInstance() {
}
class DtlsWritableState::_Internal {
 public:
  using HasBits = decltype(std::declval<DtlsWritableState>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_writable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DtlsWritableState::DtlsWritableState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.DtlsWritableState)
}
DtlsWritableState::DtlsWritableState(const DtlsWritableState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&writable_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(writable_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.DtlsWritableState)
}

void DtlsWritableState::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&writable_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(writable_));
}

DtlsWritableState::~DtlsWritableState() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.DtlsWritableState)
  SharedDtor();
}

void DtlsWritableState::SharedDtor() {
}

void DtlsWritableState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DtlsWritableState& DtlsWritableState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DtlsWritableState_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void DtlsWritableState::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.DtlsWritableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&writable_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(writable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DtlsWritableState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool writable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_writable(&has_bits);
          writable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DtlsWritableState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.DtlsWritableState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool writable = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_writable(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &writable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.DtlsWritableState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.DtlsWritableState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DtlsWritableState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.DtlsWritableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bool writable = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->writable(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.DtlsWritableState)
}

size_t DtlsWritableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.DtlsWritableState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional bool writable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DtlsWritableState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DtlsWritableState*>(
      &from));
}

void DtlsWritableState::MergeFrom(const DtlsWritableState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.DtlsWritableState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      writable_ = from.writable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DtlsWritableState::CopyFrom(const DtlsWritableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.DtlsWritableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtlsWritableState::IsInitialized() const {
  return true;
}

void DtlsWritableState::InternalSwap(DtlsWritableState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(writable_, other->writable_);
}

std::string DtlsWritableState::GetTypeName() const {
  return "webrtc.rtclog2.DtlsWritableState";
}


// ===================================================================

void RouteChange::InitAsDefaultInstance() {
}
class RouteChange::_Internal {
 public:
  using HasBits = decltype(std::declval<RouteChange>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_overhead(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RouteChange::RouteChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.RouteChange)
}
RouteChange::RouteChange(const RouteChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&overhead_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(overhead_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.RouteChange)
}

void RouteChange::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overhead_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(overhead_));
}

RouteChange::~RouteChange() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.RouteChange)
  SharedDtor();
}

void RouteChange::SharedDtor() {
}

void RouteChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteChange& RouteChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteChange_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void RouteChange::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.RouteChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&overhead_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(overhead_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RouteChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool connected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_connected(&has_bits);
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 overhead = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_overhead(&has_bits);
          overhead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RouteChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.RouteChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool connected = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_connected(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 overhead = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_overhead(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overhead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.RouteChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.RouteChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RouteChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.RouteChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bool connected = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->connected(), output);
  }

  // optional uint32 overhead = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->overhead(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.RouteChange)
}

size_t RouteChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.RouteChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional bool connected = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 overhead = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->overhead());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RouteChange*>(
      &from));
}

void RouteChange::MergeFrom(const RouteChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.RouteChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      connected_ = from.connected_;
    }
    if (cached_has_bits & 0x00000004u) {
      overhead_ = from.overhead_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RouteChange::CopyFrom(const RouteChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.RouteChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteChange::IsInitialized() const {
  return true;
}

void RouteChange::InternalSwap(RouteChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(connected_, other->connected_);
  swap(overhead_, other->overhead_);
}

std::string RouteChange::GetTypeName() const {
  return "webrtc.rtclog2.RouteChange";
}


// ===================================================================

void RemoteEstimates::InitAsDefaultInstance() {
}
class RemoteEstimates::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteEstimates>()._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_link_capacity_lower_kbps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_link_capacity_upper_kbps(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_link_capacity_lower_kbps_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_link_capacity_upper_kbps_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RemoteEstimates::RemoteEstimates()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.RemoteEstimates)
}
RemoteEstimates::RemoteEstimates(const RemoteEstimates& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  link_capacity_lower_kbps_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_link_capacity_lower_kbps_deltas()) {
    link_capacity_lower_kbps_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.link_capacity_lower_kbps_deltas_);
  }
  link_capacity_upper_kbps_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_link_capacity_upper_kbps_deltas()) {
    link_capacity_upper_kbps_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.link_capacity_upper_kbps_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.RemoteEstimates)
}

void RemoteEstimates::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteEstimates_rtc_5fevent_5flog2_2eproto.base);
  timestamp_ms_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_capacity_lower_kbps_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_capacity_upper_kbps_deltas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

RemoteEstimates::~RemoteEstimates() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.RemoteEstimates)
  SharedDtor();
}

void RemoteEstimates::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_capacity_lower_kbps_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_capacity_upper_kbps_deltas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteEstimates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteEstimates& RemoteEstimates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteEstimates_rtc_5fevent_5flog2_2eproto.base);
  return *internal_default_instance();
}


void RemoteEstimates::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.RemoteEstimates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      link_capacity_lower_kbps_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      link_capacity_upper_kbps_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoteEstimates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 link_capacity_lower_kbps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_link_capacity_lower_kbps(&has_bits);
          link_capacity_lower_kbps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 link_capacity_upper_kbps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_link_capacity_upper_kbps(&has_bits);
          link_capacity_upper_kbps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_deltas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_timestamp_ms_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes link_capacity_lower_kbps_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_link_capacity_lower_kbps_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes link_capacity_upper_kbps_deltas = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_link_capacity_upper_kbps_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoteEstimates::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.RemoteEstimates)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 link_capacity_lower_kbps = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_link_capacity_lower_kbps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_capacity_lower_kbps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 link_capacity_upper_kbps = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_link_capacity_upper_kbps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_capacity_upper_kbps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_number_of_deltas(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes link_capacity_lower_kbps_deltas = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_link_capacity_lower_kbps_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes link_capacity_upper_kbps_deltas = 103;
      case 103: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_link_capacity_upper_kbps_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.RemoteEstimates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.RemoteEstimates)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoteEstimates::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.RemoteEstimates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 link_capacity_lower_kbps = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->link_capacity_lower_kbps(), output);
  }

  // optional uint32 link_capacity_upper_kbps = 3;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->link_capacity_upper_kbps(), output);
  }

  // optional uint32 number_of_deltas = 4;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes link_capacity_lower_kbps_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->link_capacity_lower_kbps_deltas(), output);
  }

  // optional bytes link_capacity_upper_kbps_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->link_capacity_upper_kbps_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.RemoteEstimates)
}

size_t RemoteEstimates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.RemoteEstimates)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes link_capacity_lower_kbps_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->link_capacity_lower_kbps_deltas());
    }

    // optional bytes link_capacity_upper_kbps_deltas = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->link_capacity_upper_kbps_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 link_capacity_lower_kbps = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->link_capacity_lower_kbps());
    }

    // optional uint32 link_capacity_upper_kbps = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->link_capacity_upper_kbps());
    }

    // optional uint32 number_of_deltas = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteEstimates::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RemoteEstimates*>(
      &from));
}

void RemoteEstimates::MergeFrom(const RemoteEstimates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.RemoteEstimates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      timestamp_ms_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      link_capacity_lower_kbps_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.link_capacity_lower_kbps_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      link_capacity_upper_kbps_deltas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.link_capacity_upper_kbps_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      link_capacity_lower_kbps_ = from.link_capacity_lower_kbps_;
    }
    if (cached_has_bits & 0x00000020u) {
      link_capacity_upper_kbps_ = from.link_capacity_upper_kbps_;
    }
    if (cached_has_bits & 0x00000040u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoteEstimates::CopyFrom(const RemoteEstimates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.RemoteEstimates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteEstimates::IsInitialized() const {
  return true;
}

void RemoteEstimates::InternalSwap(RemoteEstimates* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_capacity_lower_kbps_deltas_.Swap(&other->link_capacity_lower_kbps_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_capacity_upper_kbps_deltas_.Swap(&other->link_capacity_upper_kbps_deltas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(link_capacity_lower_kbps_, other->link_capacity_lower_kbps_);
  swap(link_capacity_upper_kbps_, other->link_capacity_upper_kbps_);
  swap(number_of_deltas_, other->number_of_deltas_);
}

std::string RemoteEstimates::GetTypeName() const {
  return "webrtc.rtclog2.RemoteEstimates";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rtclog2
}  // namespace webrtc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::EventStream* Arena::CreateMaybeMessage< ::webrtc::rtclog2::EventStream >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::EventStream >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::Event* Arena::CreateMaybeMessage< ::webrtc::rtclog2::Event >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::GenericPacketReceived* Arena::CreateMaybeMessage< ::webrtc::rtclog2::GenericPacketReceived >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::GenericPacketReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::GenericPacketSent* Arena::CreateMaybeMessage< ::webrtc::rtclog2::GenericPacketSent >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::GenericPacketSent >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::GenericAckReceived* Arena::CreateMaybeMessage< ::webrtc::rtclog2::GenericAckReceived >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::GenericAckReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::IncomingRtpPackets* Arena::CreateMaybeMessage< ::webrtc::rtclog2::IncomingRtpPackets >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::IncomingRtpPackets >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::OutgoingRtpPackets* Arena::CreateMaybeMessage< ::webrtc::rtclog2::OutgoingRtpPackets >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::OutgoingRtpPackets >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::IncomingRtcpPackets* Arena::CreateMaybeMessage< ::webrtc::rtclog2::IncomingRtcpPackets >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::IncomingRtcpPackets >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::OutgoingRtcpPackets* Arena::CreateMaybeMessage< ::webrtc::rtclog2::OutgoingRtcpPackets >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::OutgoingRtcpPackets >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::AudioPlayoutEvents* Arena::CreateMaybeMessage< ::webrtc::rtclog2::AudioPlayoutEvents >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::AudioPlayoutEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::FrameDecodedEvents* Arena::CreateMaybeMessage< ::webrtc::rtclog2::FrameDecodedEvents >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::FrameDecodedEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::BeginLogEvent* Arena::CreateMaybeMessage< ::webrtc::rtclog2::BeginLogEvent >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::BeginLogEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::EndLogEvent* Arena::CreateMaybeMessage< ::webrtc::rtclog2::EndLogEvent >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::EndLogEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::LossBasedBweUpdates* Arena::CreateMaybeMessage< ::webrtc::rtclog2::LossBasedBweUpdates >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::LossBasedBweUpdates >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::DelayBasedBweUpdates* Arena::CreateMaybeMessage< ::webrtc::rtclog2::DelayBasedBweUpdates >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::DelayBasedBweUpdates >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::RtpHeaderExtensionConfig* Arena::CreateMaybeMessage< ::webrtc::rtclog2::RtpHeaderExtensionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::RtpHeaderExtensionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::VideoRecvStreamConfig* Arena::CreateMaybeMessage< ::webrtc::rtclog2::VideoRecvStreamConfig >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::VideoRecvStreamConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::VideoSendStreamConfig* Arena::CreateMaybeMessage< ::webrtc::rtclog2::VideoSendStreamConfig >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::VideoSendStreamConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::AudioRecvStreamConfig* Arena::CreateMaybeMessage< ::webrtc::rtclog2::AudioRecvStreamConfig >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::AudioRecvStreamConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::AudioSendStreamConfig* Arena::CreateMaybeMessage< ::webrtc::rtclog2::AudioSendStreamConfig >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::AudioSendStreamConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::AudioNetworkAdaptations* Arena::CreateMaybeMessage< ::webrtc::rtclog2::AudioNetworkAdaptations >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::AudioNetworkAdaptations >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::BweProbeCluster* Arena::CreateMaybeMessage< ::webrtc::rtclog2::BweProbeCluster >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::BweProbeCluster >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::BweProbeResultSuccess* Arena::CreateMaybeMessage< ::webrtc::rtclog2::BweProbeResultSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::BweProbeResultSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::BweProbeResultFailure* Arena::CreateMaybeMessage< ::webrtc::rtclog2::BweProbeResultFailure >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::BweProbeResultFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::AlrState* Arena::CreateMaybeMessage< ::webrtc::rtclog2::AlrState >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::AlrState >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::IceCandidatePairConfig* Arena::CreateMaybeMessage< ::webrtc::rtclog2::IceCandidatePairConfig >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::IceCandidatePairConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::IceCandidatePairEvent* Arena::CreateMaybeMessage< ::webrtc::rtclog2::IceCandidatePairEvent >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::IceCandidatePairEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::DtlsTransportStateEvent* Arena::CreateMaybeMessage< ::webrtc::rtclog2::DtlsTransportStateEvent >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::DtlsTransportStateEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::DtlsWritableState* Arena::CreateMaybeMessage< ::webrtc::rtclog2::DtlsWritableState >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::DtlsWritableState >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::RouteChange* Arena::CreateMaybeMessage< ::webrtc::rtclog2::RouteChange >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::RouteChange >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::RemoteEstimates* Arena::CreateMaybeMessage< ::webrtc::rtclog2::RemoteEstimates >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::RemoteEstimates >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
